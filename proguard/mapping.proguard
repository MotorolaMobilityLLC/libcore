sun.misc.ASCIICaseInsensitiveComparator -> xx003.a:
    java.util.Comparator CASE_INSENSITIVE_ORDER -> a
    boolean $assertionsDisabled -> b
    int compare(java.lang.String,java.lang.String) -> a
    int lowerCaseHashCode(java.lang.String) -> a
    boolean isLower(int) -> a
    boolean isUpper(int) -> b
    int toLower(int) -> c
    int toUpper(int) -> d
    int compare(java.lang.Object,java.lang.Object) -> compare
sun.misc.BASE64Decoder -> xx003.b:
    char[] pem_array -> a
    byte[] pem_convert_array -> b
    byte[] decode_buffer -> c
    int bytesPerAtom() -> a
    int bytesPerLine() -> b
    void decodeAtom(java.io.PushbackInputStream,java.io.OutputStream,int) -> a
sun.misc.BASE64Encoder -> xx003.c:
    char[] pem_array -> b
    int bytesPerAtom() -> a
    int bytesPerLine() -> b
    void encodeAtom(java.io.OutputStream,byte[],int,int) -> a
sun.misc.CEFormatException -> xx003.d:
sun.misc.CEStreamExhausted -> xx003.e:
sun.misc.CharacterDecoder -> xx003.f:
    int bytesPerAtom() -> a
    int bytesPerLine() -> b
    void decodeBufferPrefix$ea63451() -> c
    void decodeBufferSuffix$ea63451() -> d
    int decodeLinePrefix$ea63444() -> e
    void decodeLineSuffix$ea63451() -> f
    void decodeAtom(java.io.PushbackInputStream,java.io.OutputStream,int) -> a
    int readFully(java.io.InputStream,byte[],int,int) -> a
    void decodeBuffer(java.io.InputStream,java.io.OutputStream) -> a
    byte[] decodeBuffer(java.lang.String) -> a
    byte[] decodeBuffer(java.io.InputStream) -> a
    java.nio.ByteBuffer decodeBufferToByteBuffer(java.lang.String) -> b
    java.nio.ByteBuffer decodeBufferToByteBuffer(java.io.InputStream) -> b
sun.misc.CharacterEncoder -> xx003.g:
    java.io.PrintStream pStream -> a
    int bytesPerAtom() -> a
    int bytesPerLine() -> b
    void encodeBufferPrefix(java.io.OutputStream) -> a
    void encodeBufferSuffix$a3063a7() -> d
    void encodeLinePrefix$3bdc843c(int) -> a
    void encodeLineSuffix$a3063a7() -> c
    void encodeAtom(java.io.OutputStream,byte[],int,int) -> a
    int readFully(java.io.InputStream,byte[]) -> a
    void encode(java.io.InputStream,java.io.OutputStream) -> b
    void encode(byte[],java.io.OutputStream) -> b
    java.lang.String encode(byte[]) -> a
    byte[] getBytes(java.nio.ByteBuffer) -> a
    void encode(java.nio.ByteBuffer,java.io.OutputStream) -> b
    java.lang.String encode(java.nio.ByteBuffer) -> b
    void encodeBuffer(java.io.InputStream,java.io.OutputStream) -> a
    void encodeBuffer(byte[],java.io.OutputStream) -> a
    java.lang.String encodeBuffer(byte[]) -> b
    void encodeBuffer(java.nio.ByteBuffer,java.io.OutputStream) -> a
    java.lang.String encodeBuffer(java.nio.ByteBuffer) -> c
sun.misc.Cleaner -> xx003.h:
    java.lang.ref.ReferenceQueue dummyQueue -> a
    sun.misc.Cleaner first -> b
    sun.misc.Cleaner next -> c
    sun.misc.Cleaner prev -> d
    java.lang.Runnable thunk -> e
    sun.misc.Cleaner add(sun.misc.Cleaner) -> a
    boolean remove(sun.misc.Cleaner) -> b
    sun.misc.Cleaner create(java.lang.Object,java.lang.Runnable) -> a
    void clean() -> a
sun.misc.Cleaner$1 -> xx003.i:
    java.lang.Throwable val$x -> a
    sun.misc.Cleaner this$0 -> b
    java.lang.Void run() -> a
    java.lang.Object run() -> run
sun.misc.CompoundEnumeration -> xx003.j:
    java.util.Enumeration[] enums -> a
    int index -> b
    boolean next() -> a
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
sun.misc.DoubleConsts -> xx003.k:
    double POSITIVE_INFINITY -> a
    double NEGATIVE_INFINITY -> b
    double NaN -> c
    double MAX_VALUE -> d
    double MIN_VALUE -> e
    double MIN_NORMAL -> f
    int SIGNIFICAND_WIDTH -> g
    int MAX_EXPONENT -> h
    int MIN_EXPONENT -> i
    int MIN_SUB_EXPONENT -> j
    int EXP_BIAS -> k
    long SIGN_BIT_MASK -> l
    long EXP_BIT_MASK -> m
    long SIGNIF_BIT_MASK -> n
sun.misc.FDBigInt -> xx003.l:
    int nWords -> a
    int[] data -> b
    boolean $assertionsDisabled -> c
    void lshiftMe(int) -> a
    int normalizeMe() -> a
    sun.misc.FDBigInt mult(int) -> b
    void multaddMe(int,int) -> a
    sun.misc.FDBigInt mult(sun.misc.FDBigInt) -> a
    sun.misc.FDBigInt add(sun.misc.FDBigInt) -> b
    sun.misc.FDBigInt sub(sun.misc.FDBigInt) -> c
    boolean dataInRangeIsZero(int,int,sun.misc.FDBigInt) -> a
    int cmp(sun.misc.FDBigInt) -> d
    int quoRemIteration(sun.misc.FDBigInt) -> e
    long longValue() -> b
    java.lang.String toString() -> toString
sun.misc.FileURLMapper -> xx003.m:
    java.net.URL url -> a
    java.lang.String path -> b
    java.lang.String getPath() -> a
    boolean exists() -> b
    byte[] readFully(java.io.InputStream,int,boolean) -> a
sun.misc.FloatConsts -> xx003.n:
    float POSITIVE_INFINITY -> a
    float NEGATIVE_INFINITY -> b
    float NaN -> c
    float MAX_VALUE -> d
    float MIN_VALUE -> e
    float MIN_NORMAL -> f
    int SIGNIFICAND_WIDTH -> g
    int MAX_EXPONENT -> h
    int MIN_EXPONENT -> i
    int MIN_SUB_EXPONENT -> j
    int EXP_BIAS -> k
    int SIGN_BIT_MASK -> l
    int EXP_BIT_MASK -> m
    int SIGNIF_BIT_MASK -> n
sun.misc.FloatingDecimal -> xx003.o:
    boolean isExceptional -> a
    boolean isNegative -> b
    int decExponent -> c
    char[] digits -> d
    int nDigits -> e
    int bigIntExp -> f
    int bigIntNBits -> g
    boolean mustSetRoundDir -> h
    boolean fromHex -> i
    int roundDir -> j
    long signMask -> k
    long expMask -> l
    long fractMask -> m
    int expShift -> n
    int expBias -> o
    long fractHOB -> p
    long expOne -> q
    int maxSmallBinExp -> r
    int minSmallBinExp -> s
    int maxDecimalDigits -> t
    int maxDecimalExponent -> u
    int minDecimalExponent -> v
    int bigDecimalExponent -> w
    long highbyte -> x
    long highbit -> y
    long lowbytes -> z
    int singleSignMask -> A
    int singleExpMask -> B
    int singleFractMask -> C
    int singleExpShift -> D
    int singleFractHOB -> E
    int singleExpBias -> F
    int singleMaxDecimalDigits -> G
    int singleMaxDecimalExponent -> H
    int singleMinDecimalExponent -> I
    int intDecimalDigits -> J
    sun.misc.FDBigInt[] b5p -> K
    java.lang.ThreadLocal perThreadBuffer -> L
    double[] small10pow -> M
    float[] singleSmall10pow -> N
    double[] big10pow -> O
    double[] tiny10pow -> P
    int maxSmallTen -> Q
    int singleMaxSmallTen -> R
    int[] small5pow -> S
    long[] long5pow -> T
    int[] n5bits -> U
    char[] infinity -> V
    char[] notANumber -> W
    char[] zero -> X
    java.util.regex.Pattern hexFloatPattern -> Y
    boolean $assertionsDisabled -> Z
    int countBits(long) -> a
    sun.misc.FDBigInt big5pow(int) -> a
    sun.misc.FDBigInt multPow52(sun.misc.FDBigInt,int,int) -> a
    sun.misc.FDBigInt constructPow52(int,int) -> a
    sun.misc.FDBigInt doubleToBigInt(double) -> a
    double ulp(double,boolean) -> a
    float stickyRound(double) -> b
    void developLongDigits(int,long,long) -> a
    void roundup() -> d
    void dtoa(int,long,int) -> a
    java.lang.String toString() -> toString
    java.lang.String toJavaFormatString() -> a
    int getChars(char[]) -> a
    void appendTo(java.lang.Appendable) -> a
    sun.misc.FloatingDecimal readJavaFormatString(java.lang.String) -> a
    double doubleValue() -> b
    float floatValue() -> c
    java.util.regex.Pattern getHexFloatPattern() -> e
    sun.misc.FloatingDecimal parseHexString(java.lang.String) -> b
    java.lang.String stripLeadingZeros(java.lang.String) -> c
    int getHexDigit(java.lang.String,int) -> a
sun.misc.FloatingDecimal$1 -> xx003.p:
    java.lang.Object initialValue() -> initialValue
sun.misc.FormattedFloatingDecimal -> xx003.q:
    boolean isExceptional -> a
    boolean isNegative -> b
    int decExponent -> c
    int decExponentRounded -> d
    char[] digits -> e
    int nDigits -> f
    int bigIntExp -> g
    int bigIntNBits -> h
    boolean mustSetRoundDir -> i
    boolean fromHex -> j
    int roundDir -> k
    int precision -> l
    sun.misc.FormattedFloatingDecimal$Form form -> m
    long signMask -> n
    long expMask -> o
    long fractMask -> p
    int expShift -> q
    int expBias -> r
    long fractHOB -> s
    long expOne -> t
    int maxSmallBinExp -> u
    int minSmallBinExp -> v
    int maxDecimalDigits -> w
    int maxDecimalExponent -> x
    int minDecimalExponent -> y
    int bigDecimalExponent -> z
    long highbyte -> A
    long highbit -> B
    long lowbytes -> C
    int singleSignMask -> D
    int singleExpMask -> E
    int singleFractMask -> F
    int singleExpShift -> G
    int singleFractHOB -> H
    int singleExpBias -> I
    int singleMaxDecimalDigits -> J
    int singleMaxDecimalExponent -> K
    int singleMinDecimalExponent -> L
    int intDecimalDigits -> M
    sun.misc.FDBigInt[] b5p -> N
    java.lang.ThreadLocal perThreadBuffer -> O
    double[] small10pow -> P
    float[] singleSmall10pow -> Q
    double[] big10pow -> R
    double[] tiny10pow -> S
    int maxSmallTen -> T
    int singleMaxSmallTen -> U
    int[] small5pow -> V
    long[] long5pow -> W
    int[] n5bits -> X
    char[] infinity -> Y
    char[] notANumber -> Z
    char[] zero -> aa
    boolean $assertionsDisabled -> ab
    int countBits(long) -> a
    sun.misc.FDBigInt big5pow(int) -> a
    sun.misc.FDBigInt multPow52(sun.misc.FDBigInt,int,int) -> a
    sun.misc.FDBigInt constructPow52(int,int) -> a
    sun.misc.FDBigInt doubleToBigInt(double) -> a
    double ulp(double,boolean) -> a
    float stickyRound(double) -> b
    void developLongDigits(int,long,long) -> a
    void roundup() -> c
    int checkExponent(int) -> b
    char[] applyPrecision(int) -> c
    void dtoa(int,long,int) -> a
    java.lang.String toString() -> toString
    int getExponent() -> a
    int getExponentRounded() -> b
    int getChars(char[]) -> a
    double doubleValue() -> d
    float floatValue() -> e
sun.misc.FormattedFloatingDecimal$1 -> xx003.r:
    java.lang.Object initialValue() -> initialValue
sun.misc.FormattedFloatingDecimal$2 -> xx003.s:
    int[] $SwitchMap$sun$misc$FormattedFloatingDecimal$Form -> a
sun.misc.FormattedFloatingDecimal$Form -> xx003.t:
    sun.misc.FormattedFloatingDecimal$Form SCIENTIFIC -> a
    sun.misc.FormattedFloatingDecimal$Form COMPATIBLE -> b
    sun.misc.FormattedFloatingDecimal$Form DECIMAL_FLOAT -> c
    sun.misc.FormattedFloatingDecimal$Form GENERAL -> d
    sun.misc.FormattedFloatingDecimal$Form[] $VALUES -> e
    sun.misc.FormattedFloatingDecimal$Form[] values() -> a
    sun.misc.FormattedFloatingDecimal$Form valueOf(java.lang.String) -> a
sun.misc.FpUtils -> xx003.u:
    double twoToTheDoubleScaleUp -> a
    double twoToTheDoubleScaleDown -> b
    boolean $assertionsDisabled -> c
    int getExponent(double) -> a
    int getExponent(float) -> a
    double powerOfTwoD(int) -> a
    float powerOfTwoF(int) -> b
    double rawCopySign(double,double) -> a
    float rawCopySign(float,float) -> a
    boolean isFinite(double) -> b
    boolean isFinite(float) -> e
    boolean isInfinite(double) -> f
    boolean isInfinite(float) -> f
    boolean isNaN(double) -> g
    boolean isNaN(float) -> g
    boolean isUnordered(double,double) -> d
    boolean isUnordered(float,float) -> c
    int ilogb(double) -> h
    int ilogb(float) -> h
    double scalb(double,int) -> a
    float scalb(float,int) -> a
    double nextAfter(double,double) -> b
    float nextAfter(float,double) -> a
    double nextUp(double) -> c
    float nextUp(float) -> b
    double nextDown(double) -> i
    double nextDown(float) -> i
    double copySign(double,double) -> c
    float copySign(float,float) -> b
    double ulp(double) -> d
    float ulp(float) -> c
    double signum(double) -> e
    float signum(float) -> d
sun.misc.Hashing -> xx003.v:
    int murmur3_32(byte[]) -> a
    int murmur3_32(int,byte[]) -> a
    int murmur3_32(int,byte[],int,int) -> a
    int murmur3_32(char[]) -> a
    int murmur3_32(int,char[]) -> a
    int murmur3_32(int,char[],int,int) -> a
    int murmur3_32(int[]) -> a
    int murmur3_32(int,int[]) -> a
    int murmur3_32(int,int[],int,int) -> a
    int stringHash32(java.lang.String) -> a
    int randomHashSeed(java.lang.Object) -> a
sun.misc.HexDumpEncoder -> xx003.w:
    int offset -> b
    int thisLineLength -> c
    int currentByte -> d
    byte[] thisLine -> e
    void hexDigit(java.io.PrintStream,byte) -> a
    int bytesPerAtom() -> a
    int bytesPerLine() -> b
    void encodeBufferPrefix(java.io.OutputStream) -> a
    void encodeLinePrefix$3bdc843c(int) -> a
    void encodeAtom(java.io.OutputStream,byte[],int,int) -> a
    void encodeLineSuffix$a3063a7() -> c
sun.misc.IOUtils -> xx003.x:
    byte[] readFully(java.io.InputStream,int,boolean) -> a
sun.misc.InvalidJarIndexException -> xx003.y:
sun.misc.IoTrace -> xx003.z:
    java.lang.String type -> a
    java.lang.String algorithm -> b
    java.lang.Object socketReadBegin() -> a
    void socketReadEnd$6f6611db() -> b
    java.lang.Object socketWriteBegin() -> c
    void socketWriteEnd$3d6663c0() -> d
    java.lang.Object fileReadBegin$9543ced() -> e
    void fileReadEnd$4cfd00d3() -> f
    java.lang.Object fileWriteBegin$9543ced() -> g
    void fileWriteEnd$4cfd00d3() -> h
sun.misc.JarIndex -> xx003.A:
    java.util.HashMap indexMap -> a
    java.util.HashMap jarMap -> b
    java.lang.String[] jarFiles -> c
    java.lang.String INDEX_NAME -> d
    boolean metaInfFilenames -> e
    sun.misc.JarIndex getJarIndex(java.util.jar.JarFile) -> a
    sun.misc.JarIndex getJarIndex(java.util.jar.JarFile,sun.misc.MetaIndex) -> a
    java.lang.String[] getJarFiles() -> a
    void addToList(java.lang.String,java.lang.String,java.util.HashMap) -> a
    java.util.LinkedList get(java.lang.String) -> a
    void add(java.lang.String,java.lang.String) -> a
    void addExplicit(java.lang.String,java.lang.String) -> b
    void parseJars(java.lang.String[]) -> a
    void write(java.io.OutputStream) -> a
    void read(java.io.InputStream) -> a
    void merge(sun.misc.JarIndex,java.lang.String) -> a
sun.misc.JavaSecurityProtectionDomainAccess -> xx003.B:
    char SYMBOL_REF -> a
    int DECIMAL -> b
    sun.net.idn.UCharacterEnums$ECharacterCategory getProtectionDomainCache$511bca2() -> a
    void put$e29187b() -> b
    java.security.PermissionCollection get$39eb154f() -> c
    boolean schemeSupported$552c4dfd() -> d
    java.lang.String authString$66a25658() -> e
    java.util.jar.JarFile retrieve$41263162() -> f
    java.lang.Object newInstance$42af7916() -> g
    javax.security.auth.Subject getClientSubject$308315e2() -> h
    javax.security.auth.Subject getServerSubject$308315e2() -> i
    javax.crypto.SecretKey[] getServerKeys$63c7ab66() -> j
    java.lang.String getServerPrincipalName$273229f6() -> k
    java.lang.String getPrincipalHostName$342219c0() -> l
    java.security.Permission getServicePermission$510a0b75() -> m
    char[] lookup$505d7141() -> n
    sun.net.idn.UCharacterEnums$ECharacterDirection lookupMatcher$2555c5d7$3188f330() -> o
    java.lang.String parseReference$17476cf8() -> p
sun.misc.JavaSecurityProtectionDomainAccess$ProtectionDomainCache -> xx003.C:
    void put$e29187b() -> a
    java.security.PermissionCollection get$39eb154f() -> b
sun.misc.LRUCache -> xx003.D:
    java.lang.Object[] oa -> oa
    int size -> size
    java.lang.Object create(java.lang.Object) -> create
    boolean hasName(java.lang.Object,java.lang.Object) -> hasName
    void moveToFront(java.lang.Object[],int) -> moveToFront
    java.lang.Object forName(java.lang.Object) -> forName
sun.misc.MessageUtils -> xx003.E:
    int version -> a
    sun.security.util.ObjectIdentifier policy -> b
    java.math.BigInteger serialNumber -> c
    sun.security.x509.AlgorithmId hashAlgorithm -> d
    byte[] hashedMessage -> e
    java.util.Date genTime -> f
    java.math.BigInteger nonce -> g
    java.lang.String subst(java.lang.String,java.lang.String) -> a
    java.lang.String subst(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String subst(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String subst(java.lang.String,java.lang.String[]) -> a
    java.lang.String substProp(java.lang.String,java.lang.String) -> b
    java.lang.String substProp(java.lang.String,java.lang.String,java.lang.String) -> b
    java.lang.String substProp(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> b
    void err(java.lang.String) -> a
    void out(java.lang.String) -> b
    void where() -> f
    java.util.Date getDate() -> a
    sun.security.x509.AlgorithmId getHashAlgorithm() -> b
    byte[] getHashedMessage() -> c
    java.math.BigInteger getNonce() -> d
    java.math.BigInteger getSerialNumber() -> e
    void parse(byte[]) -> a
sun.misc.MetaIndex -> xx003.F:
    java.util.Map jarMap -> a
    java.lang.String[] contents -> b
    boolean isClassOnlyJar -> c
    boolean $assertionsDisabled -> d
    sun.misc.MetaIndex forJar(java.io.File) -> a
    void registerDirectory(java.io.File) -> b
    boolean mayContain(java.lang.String) -> a
    java.util.Map getJarMap() -> a
sun.misc.REException -> xx003.G:
sun.misc.RegexpNode -> xx003.H:
    char c -> f
    sun.misc.RegexpNode firstchild -> a
    sun.misc.RegexpNode nextsibling -> g
    int depth -> b
    boolean exact -> c
    java.lang.Object result -> d
    java.lang.String re -> e
    sun.misc.RegexpNode add(char) -> a
    sun.misc.RegexpNode find(char) -> b
    void print(java.io.PrintStream) -> a
sun.misc.RegexpPool -> xx003.I:
    sun.misc.RegexpNode prefixMachine -> a
    sun.misc.RegexpNode suffixMachine -> b
    int BIG -> c
    int lastDepth -> d
    void add(java.lang.String,java.lang.Object) -> a
    void replace(java.lang.String,java.lang.Object) -> b
    java.lang.Object delete(java.lang.String) -> b
    java.lang.Object match(java.lang.String) -> a
    java.lang.Object matchNext(java.lang.String) -> c
    void add(java.lang.String,java.lang.Object,boolean) -> a
    java.lang.Object matchAfter(java.lang.String,int) -> a
    void reset() -> a
    void print(java.io.PrintStream) -> a
sun.misc.RegexpTarget -> xx003.J:
    java.lang.Object found$9543ced() -> a
sun.misc.Resource -> xx003.K:
    java.io.InputStream cis -> a
    java.lang.String getName() -> a
    java.net.URL getURL() -> b
    java.net.URL getCodeSourceURL() -> c
    java.io.InputStream getInputStream() -> d
    int getContentLength() -> e
    java.io.InputStream cachedInputStream() -> k
    byte[] getBytes() -> f
    java.nio.ByteBuffer getByteBuffer() -> g
    java.util.jar.Manifest getManifest() -> h
    java.security.cert.Certificate[] getCertificates() -> i
    java.security.CodeSigner[] getCodeSigners() -> j
sun.misc.Service -> xx003.L:
    java.lang.String prefix -> a
    java.lang.StringBuffer buf -> b
    void fail(java.lang.Class,java.lang.String,java.lang.Throwable) -> b
    void fail(java.lang.Class,java.lang.String) -> b
    void fail(java.lang.Class,java.net.URL,int,java.lang.String) -> a
    int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List,java.util.Set) -> a
    java.util.Iterator parse(java.lang.Class,java.net.URL,java.util.Set) -> b
    java.util.Iterator providers(java.lang.Class,java.lang.ClassLoader) -> a
    java.util.Iterator providers(java.lang.Class) -> a
    java.util.Iterator installedProviders(java.lang.Class) -> b
    void access$000(java.lang.Class,java.lang.String) -> a
    java.util.Iterator access$100(java.lang.Class,java.net.URL,java.util.Set) -> a
    void access$200(java.lang.Class,java.lang.String,java.lang.Throwable) -> a
    int length() -> a
    char charAt(int) -> a
    void getChars(int,int,char[],int) -> a
sun.misc.Service$1 -> xx003.M:
sun.misc.Service$LazyIterator -> xx003.N:
    java.lang.Class service -> a
    java.lang.ClassLoader loader -> b
    java.util.Enumeration configs -> c
    java.util.Iterator pending -> d
    java.util.Set returned -> e
    java.lang.String nextName -> f
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
sun.misc.ServiceConfigurationError -> xx003.O:
sun.misc.SoftCache -> xx003.P:
    java.util.Map hash -> a
    java.lang.ref.ReferenceQueue queue -> b
    java.util.Set entrySet -> c
    void processQueue() -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object fill$7713a341() -> b
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean valEquals(java.lang.Object,java.lang.Object) -> b
    java.util.Set entrySet() -> entrySet
    java.lang.ref.ReferenceQueue access$500(sun.misc.SoftCache) -> a
    boolean access$600(java.lang.Object,java.lang.Object) -> a
    java.util.Map access$700(sun.misc.SoftCache) -> b
    void access$800(sun.misc.SoftCache) -> c
sun.misc.SoftCache$1 -> xx003.Q:
sun.misc.SoftCache$Entry -> xx003.R:
    java.util.Map$Entry ent -> a
    java.lang.Object value -> b
    sun.misc.SoftCache this$0 -> c
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Map$Entry access$900(sun.misc.SoftCache$Entry) -> a
sun.misc.SoftCache$EntrySet -> xx003.S:
    java.util.Set hashEntries -> a
    sun.misc.SoftCache this$0 -> b
    java.util.Iterator iterator() -> iterator
    boolean isEmpty() -> isEmpty
    int size() -> size
    boolean remove(java.lang.Object) -> remove
sun.misc.SoftCache$EntrySet$1 -> xx003.T:
    java.util.Iterator hashIterator -> a
    sun.misc.SoftCache$Entry next -> b
    sun.misc.SoftCache$EntrySet this$1 -> c
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
sun.misc.SoftCache$ValueCell -> xx003.U:
    java.lang.Object INVALID_KEY -> a
    int dropped -> b
    java.lang.Object key -> c
    sun.misc.SoftCache$ValueCell create(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue) -> b
    java.lang.Object strip(java.lang.Object,boolean) -> b
    boolean isValid() -> b
    void drop() -> c
    boolean access$000(sun.misc.SoftCache$ValueCell) -> a
    java.lang.Object access$100(sun.misc.SoftCache$ValueCell) -> b
    int access$210() -> a
    java.lang.Object access$300(java.lang.Object,boolean) -> a
    sun.misc.SoftCache$ValueCell access$400(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue) -> a
sun.misc.URLClassPath -> xx003.V:
    java.lang.String USER_AGENT_JAVA_VERSION -> c
    java.lang.String JAVA_VERSION -> a
    boolean DEBUG -> d
    boolean DISABLE_JAR_CHECKING -> e
    java.util.ArrayList path -> f
    java.util.Stack urls -> g
    java.util.ArrayList loaders -> h
    java.util.HashMap lmap -> b
    java.net.URLStreamHandler jarHandler -> i
    boolean closed -> j
    java.util.List closeLoaders() -> a
    void addURL(java.net.URL) -> a
    java.net.URL[] getURLs() -> b
    java.net.URL findResource(java.lang.String,boolean) -> a
    sun.misc.Resource getResource(java.lang.String,boolean) -> b
    java.util.Enumeration findResources(java.lang.String,boolean) -> c
    sun.misc.Resource getResource(java.lang.String) -> a
    java.util.Enumeration getResources(java.lang.String,boolean) -> d
    java.util.Enumeration getResources(java.lang.String) -> b
    sun.misc.URLClassPath$Loader getLoader(int) -> a
    sun.misc.URLClassPath$Loader getLoader(java.net.URL) -> d
    void push(java.net.URL[]) -> a
    java.net.URL[] pathToURLs(java.lang.String) -> c
    java.net.URL checkURL(java.net.URL) -> b
    void check(java.net.URL) -> c
    sun.misc.URLClassPath$Loader access$000(sun.misc.URLClassPath,int) -> a
    java.net.URLStreamHandler access$100(sun.misc.URLClassPath) -> a
    boolean access$300() -> c
    boolean access$1000() -> d
sun.misc.URLClassPath$1 -> xx003.W:
    int index -> a
    java.net.URL url -> b
    java.lang.String val$name -> c
    boolean val$check -> d
    sun.misc.URLClassPath this$0 -> e
    boolean next() -> a
    boolean hasMoreElements() -> hasMoreElements
    java.net.URL nextElement() -> b
    java.lang.Object nextElement() -> nextElement
sun.misc.URLClassPath$2 -> xx003.X:
    int index -> a
    sun.misc.Resource res -> b
    java.lang.String val$name -> c
    boolean val$check -> d
    sun.misc.URLClassPath this$0 -> e
    boolean next() -> a
    boolean hasMoreElements() -> hasMoreElements
    sun.misc.Resource nextElement() -> b
    java.lang.Object nextElement() -> nextElement
sun.misc.URLClassPath$3 -> xx003.Y:
    java.net.URL val$url -> a
    sun.misc.URLClassPath this$0 -> b
    sun.misc.URLClassPath$Loader run() -> a
    java.lang.Object run() -> run
sun.misc.URLClassPath$FileLoader -> xx003.Z:
    java.io.File dir -> a
    java.net.URL findResource(java.lang.String,boolean) -> a
    sun.misc.Resource getResource(java.lang.String,boolean) -> b
sun.misc.URLClassPath$FileLoader$1 -> xx003.aa:
    java.lang.String val$name -> a
    java.net.URL val$url -> b
    java.io.File val$file -> c
    sun.misc.URLClassPath$FileLoader this$0 -> d
    java.lang.String getName() -> a
    java.net.URL getURL() -> b
    java.net.URL getCodeSourceURL() -> c
    java.io.InputStream getInputStream() -> d
    int getContentLength() -> e
sun.misc.URLClassPath$JarLoader -> xx003.ab:
    java.util.jar.JarFile jar -> a
    java.net.URL csu -> b
    sun.misc.JarIndex index -> c
    sun.misc.MetaIndex metaIndex -> d
    java.net.URLStreamHandler handler -> e
    java.util.HashMap lmap -> f
    boolean closed -> g
    void close() -> close
    java.util.jar.JarFile getJarFile() -> c
    boolean isOptimizable(java.net.URL) -> a
    void ensureOpen() -> d
    java.util.jar.JarFile checkJar(java.util.jar.JarFile) -> a
    java.util.jar.JarFile getJarFile(java.net.URL) -> b
    sun.misc.JarIndex getIndex() -> e
    sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry) -> a
    boolean validIndex(java.lang.String) -> a
    java.net.URL findResource(java.lang.String,boolean) -> a
    sun.misc.Resource getResource(java.lang.String,boolean) -> b
    sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set) -> a
    java.net.URL[] getClassPath() -> a
    void parseExtensionsDependencies() -> f
    java.net.URL[] parseClassPath(java.net.URL,java.lang.String) -> a
    java.net.URL access$400(sun.misc.URLClassPath$JarLoader) -> a
    java.util.jar.JarFile access$502(sun.misc.URLClassPath$JarLoader,java.util.jar.JarFile) -> a
    java.util.jar.JarFile access$600(sun.misc.URLClassPath$JarLoader,java.net.URL) -> a
    sun.misc.JarIndex access$702(sun.misc.URLClassPath$JarLoader,sun.misc.JarIndex) -> a
    java.util.jar.JarFile access$500(sun.misc.URLClassPath$JarLoader) -> b
    sun.misc.MetaIndex access$800(sun.misc.URLClassPath$JarLoader) -> c
    sun.misc.JarIndex access$700(sun.misc.URLClassPath$JarLoader) -> d
    java.util.HashMap access$900(sun.misc.URLClassPath$JarLoader) -> e
    java.net.URLStreamHandler access$1100(sun.misc.URLClassPath$JarLoader) -> f
sun.misc.URLClassPath$JarLoader$1 -> xx003.ac:
    sun.misc.URLClassPath$JarLoader this$0 -> a
    java.lang.Void run() -> a
    java.lang.Object run() -> run
sun.misc.URLClassPath$JarLoader$2 -> xx003.ad:
    java.lang.String val$name -> a
    java.net.URL val$url -> b
    java.util.jar.JarEntry val$entry -> c
    sun.misc.URLClassPath$JarLoader this$0 -> d
    java.lang.String getName() -> a
    java.net.URL getURL() -> b
    java.net.URL getCodeSourceURL() -> c
    java.io.InputStream getInputStream() -> d
    int getContentLength() -> e
    java.util.jar.Manifest getManifest() -> h
    java.security.cert.Certificate[] getCertificates() -> i
    java.security.CodeSigner[] getCodeSigners() -> j
sun.misc.URLClassPath$JarLoader$3 -> xx003.ae:
    java.net.URL val$url -> a
    sun.misc.URLClassPath$JarLoader this$0 -> b
    sun.misc.URLClassPath$JarLoader run() -> a
    java.lang.Object run() -> run
sun.misc.URLClassPath$Loader -> xx003.af:
    java.net.URL base -> a
    java.util.jar.JarFile jarfile -> b
    java.net.URL getBaseURL() -> b
    java.net.URL findResource(java.lang.String,boolean) -> a
    sun.misc.Resource getResource(java.lang.String,boolean) -> b
    sun.misc.Resource getResource(java.lang.String) -> a
    void close() -> close
    java.net.URL[] getClassPath() -> a
    java.net.URL access$200(sun.misc.URLClassPath$Loader) -> a
sun.misc.URLClassPath$Loader$1 -> xx003.ag:
    java.lang.String val$name -> a
    java.net.URL val$url -> b
    java.net.URLConnection val$uc -> c
    sun.misc.URLClassPath$Loader this$0 -> d
    java.lang.String getName() -> a
    java.net.URL getURL() -> b
    java.net.URL getCodeSourceURL() -> c
    java.io.InputStream getInputStream() -> d
    int getContentLength() -> e
sun.misc.Unsafe -> sun.misc.Unsafe:
    sun.misc.Unsafe THE_ONE -> THE_ONE
    sun.misc.Unsafe theUnsafe -> theUnsafe
    int INVALID_FIELD_OFFSET -> INVALID_FIELD_OFFSET
    sun.misc.Unsafe getUnsafe() -> getUnsafe
    long objectFieldOffset(java.lang.reflect.Field) -> objectFieldOffset
    int arrayBaseOffset(java.lang.Class) -> arrayBaseOffset
    int arrayIndexScale(java.lang.Class) -> arrayIndexScale
    int getArrayBaseOffsetForComponentType(java.lang.Class) -> getArrayBaseOffsetForComponentType
    int getArrayIndexScaleForComponentType(java.lang.Class) -> getArrayIndexScaleForComponentType
    boolean compareAndSwapInt(java.lang.Object,long,int,int) -> compareAndSwapInt
    boolean compareAndSwapLong(java.lang.Object,long,long,long) -> compareAndSwapLong
    boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object) -> compareAndSwapObject
    int getIntVolatile(java.lang.Object,long) -> getIntVolatile
    void putIntVolatile(java.lang.Object,long,int) -> putIntVolatile
    long getLongVolatile(java.lang.Object,long) -> getLongVolatile
    void putLongVolatile(java.lang.Object,long,long) -> putLongVolatile
    java.lang.Object getObjectVolatile(java.lang.Object,long) -> getObjectVolatile
    void putObjectVolatile(java.lang.Object,long,java.lang.Object) -> putObjectVolatile
    int getInt(java.lang.Object,long) -> getInt
    void putInt(java.lang.Object,long,int) -> putInt
    void putOrderedInt(java.lang.Object,long,int) -> putOrderedInt
    long getLong(java.lang.Object,long) -> getLong
    void putLong(java.lang.Object,long,long) -> putLong
    void putOrderedLong(java.lang.Object,long,long) -> putOrderedLong
    java.lang.Object getObject(java.lang.Object,long) -> getObject
    void putObject(java.lang.Object,long,java.lang.Object) -> putObject
    void putOrderedObject(java.lang.Object,long,java.lang.Object) -> putOrderedObject
    boolean getBoolean(java.lang.Object,long) -> getBoolean
    void putBoolean(java.lang.Object,long,boolean) -> putBoolean
    byte getByte(java.lang.Object,long) -> getByte
    void putByte(java.lang.Object,long,byte) -> putByte
    char getChar(java.lang.Object,long) -> getChar
    void putChar(java.lang.Object,long,char) -> putChar
    short getShort(java.lang.Object,long) -> getShort
    void putShort(java.lang.Object,long,short) -> putShort
    float getFloat(java.lang.Object,long) -> getFloat
    void putFloat(java.lang.Object,long,float) -> putFloat
    double getDouble(java.lang.Object,long) -> getDouble
    void putDouble(java.lang.Object,long,double) -> putDouble
    void park(boolean,long) -> park
    void unpark(java.lang.Object) -> unpark
    java.lang.Object allocateInstance(java.lang.Class) -> allocateInstance
    int addressSize() -> addressSize
    int pageSize() -> pageSize
    long allocateMemory(long) -> allocateMemory
    void freeMemory(long) -> freeMemory
    void setMemory(long,long,byte) -> setMemory
    byte getByte$(long) -> getByte$
    void putByte$(long,byte) -> putByte$
    short getShort$(long) -> getShort$
    void putShort$(long,short) -> putShort$
    char getChar$(long) -> getChar$
    void putChar$(long,char) -> putChar$
    int getInt$(long) -> getInt$
    void putInt$(long,int) -> putInt$
    long getLong$(long) -> getLong$
    void putLong$(long,long) -> putLong$
    float getFloat$(long) -> getFloat$
    void putFloat$(long,float) -> putFloat$
    double getDouble$(long) -> getDouble$
    void putDouble$(long,double) -> putDouble$
    long getAddress(long) -> getAddress
    void copyMemoryToPrimitiveArray(long,java.lang.Object,long,long) -> copyMemoryToPrimitiveArray
    void copyMemoryFromPrimitiveArray(java.lang.Object,long,long,long) -> copyMemoryFromPrimitiveArray
    void copyMemory(long,long,long) -> copyMemory
sun.misc.VM -> xx003.ah:
    boolean suspended -> a
    int STATE_GREEN -> b
    int STATE_YELLOW -> c
    int STATE_RED -> d
    boolean booted -> e
    long directMemory -> f
    boolean pageAlignDirectMemory -> g
    boolean defaultAllowArraySyntax -> h
    boolean allowArraySyntax -> i
    boolean allowGetCallerClass -> j
    java.util.Properties savedProps -> k
    int finalRefCount -> l
    int peakFinalRefCount -> m
    int JVMTI_THREAD_STATE_ALIVE -> n
    int JVMTI_THREAD_STATE_TERMINATED -> o
    int JVMTI_THREAD_STATE_RUNNABLE -> p
    int JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER -> q
    int JVMTI_THREAD_STATE_WAITING_INDEFINITELY -> r
    int JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT -> s
    boolean threadsSuspended() -> g
    boolean allowThreadSuspension(java.lang.ThreadGroup,boolean) -> a
    boolean suspendThreads() -> h
    void unsuspendThreads() -> i
    void unsuspendSomeThreads() -> a
    int getState() -> j
    void asChange$255f295() -> k
    void asChange_otherthread$255f295() -> l
    void booted() -> b
    boolean isBooted() -> c
    long maxDirectMemory() -> d
    boolean isDirectMemoryPageAligned() -> e
    boolean allowArraySyntax() -> m
    boolean allowGetCallerClass() -> n
    java.lang.String getSavedProperty(java.lang.String) -> a
    void saveAndRemoveProperties(java.util.Properties) -> a
    void initializeOSEnvironment() -> f
    int getFinalRefCount() -> o
    int getPeakFinalRefCount() -> p
    void addFinalRefCount(int) -> a
    java.lang.Thread$State toThreadState(int) -> b
sun.misc.Version -> xx003.Version:
    java.lang.String launcher_name -> launcher_name
    java.lang.String java_version -> java_version
    java.lang.String java_runtime_name -> java_runtime_name
    java.lang.String java_runtime_version -> java_runtime_version
    boolean versionsInitialized -> versionsInitialized
    int jvm_major_version -> jvm_major_version
    int jvm_minor_version -> jvm_minor_version
    int jvm_micro_version -> jvm_micro_version
    int jvm_update_version -> jvm_update_version
    int jvm_build_number -> jvm_build_number
    java.lang.String jvm_special_version -> jvm_special_version
    int jdk_major_version -> jdk_major_version
    int jdk_minor_version -> jdk_minor_version
    int jdk_micro_version -> jdk_micro_version
    int jdk_update_version -> jdk_update_version
    int jdk_build_number -> jdk_build_number
    java.lang.String jdk_special_version -> jdk_special_version
    boolean jvmVersionInfoAvailable -> jvmVersionInfoAvailable
    void init() -> init
    void print() -> print
    void println() -> println
    void print(java.io.PrintStream) -> print
    int jvmMajorVersion() -> jvmMajorVersion
    int jvmMinorVersion() -> jvmMinorVersion
    int jvmMicroVersion() -> jvmMicroVersion
    int jvmUpdateVersion() -> jvmUpdateVersion
    java.lang.String jvmSpecialVersion() -> jvmSpecialVersion
    java.lang.String getJvmSpecialVersion() -> getJvmSpecialVersion
    int jvmBuildNumber() -> jvmBuildNumber
    int jdkMajorVersion() -> jdkMajorVersion
    int jdkMinorVersion() -> jdkMinorVersion
    int jdkMicroVersion() -> jdkMicroVersion
    int jdkUpdateVersion() -> jdkUpdateVersion
    java.lang.String jdkSpecialVersion() -> jdkSpecialVersion
    java.lang.String getJdkSpecialVersion() -> getJdkSpecialVersion
    int jdkBuildNumber() -> jdkBuildNumber
    void initVersions() -> initVersions
    boolean getJvmVersionInfo() -> getJvmVersionInfo
    void getJdkVersionInfo() -> getJdkVersionInfo
sun.net.spi.DefaultProxySelector -> xx004.DefaultProxySelector:
    java.lang.String[][] props -> props
    java.lang.String SOCKS_PROXY_VERSION -> SOCKS_PROXY_VERSION
    boolean hasSystemProxies -> hasSystemProxies
    java.util.List select(java.net.URI) -> select
    void connectFailed(java.net.URI,java.net.SocketAddress,java.io.IOException) -> connectFailed
    int defaultPort(java.lang.String) -> defaultPort
    boolean init() -> init
    java.net.Proxy getSystemProxy(java.lang.String,java.lang.String) -> getSystemProxy
    boolean access$000() -> access$000
    java.net.Proxy access$100(sun.net.spi.DefaultProxySelector,java.lang.String,java.lang.String) -> access$100
    int access$200(sun.net.spi.DefaultProxySelector,java.lang.String) -> access$200
sun.net.spi.DefaultProxySelector$1 -> xx004.a:
    java.lang.Boolean run() -> a
    java.lang.Object run() -> run
sun.net.spi.DefaultProxySelector$2 -> xx004.b:
    java.lang.String val$proto -> a
    java.lang.String val$urlhost -> b
    sun.net.spi.DefaultProxySelector$NonProxyInfo val$nprop -> c
    sun.net.spi.DefaultProxySelector this$0 -> d
    java.net.Proxy run() -> a
    java.lang.Object run() -> run
sun.net.spi.DefaultProxySelector$NonProxyInfo -> xx004.c:
    java.lang.String defStringVal -> h
    java.lang.String hostsSource -> a
    sun.misc.RegexpPool hostsPool -> b
    java.lang.String property -> c
    java.lang.String defaultVal -> d
    sun.net.spi.DefaultProxySelector$NonProxyInfo ftpNonProxyInfo -> e
    sun.net.spi.DefaultProxySelector$NonProxyInfo httpNonProxyInfo -> f
    sun.net.spi.DefaultProxySelector$NonProxyInfo httpsNonProxyInfo -> g
sun.net.spi.nameservice.NameService -> consoling.a:
    java.net.InetAddress[] lookupAllHostAddr(java.lang.String) -> lookupAllHostAddr
    java.lang.String getHostByAddr(byte[]) -> getHostByAddr
sun.net.spi.nameservice.NameServiceDescriptor -> consoling.b:
    sun.net.spi.nameservice.NameService createNameService() -> a
    java.lang.String getProviderName() -> b
    java.lang.String getType() -> c
sun.nio.ch.AbstractPollArrayWrapper -> xx001.a:
    short POLLIN -> d
    short POLLOUT -> e
    short POLLERR -> f
    short POLLHUP -> g
    short POLLNVAL -> h
    short POLLREMOVE -> i
    short SIZE_POLLFD -> j
    short FD_OFFSET -> k
    short EVENT_OFFSET -> l
    short REVENT_OFFSET -> m
    sun.nio.ch.AllocatedNativeObject pollArray -> a
    int totalChannels -> b
    long pollArrayAddress -> c
    int getEventOps(int) -> a
    int getReventOps(int) -> b
    int getDescriptor(int) -> c
    void putEventOps(int,int) -> a
    void putReventOps(int,int) -> b
    void putDescriptor(int,int) -> c
sun.nio.ch.AbstractPollSelectorImpl -> xx001.b:
    sun.nio.ch.PollArrayWrapper pollWrapper -> a
    int INIT_CAP -> f
    sun.nio.ch.SelectionKeyImpl[] channelArray -> b
    int channelOffset -> g
    int totalChannels -> c
    boolean closed -> h
    java.lang.Object closeLock -> i
    boolean $assertionsDisabled -> j
    void putEventOps(sun.nio.ch.SelectionKeyImpl,int) -> a
    java.nio.channels.Selector wakeup() -> wakeup
    int doSelect(long) -> a
    void implClose() -> a
    void implCloseInterrupt() -> b
    int updateSelectedKeys() -> c
    void implRegister(sun.nio.ch.SelectionKeyImpl) -> a
    void implDereg(sun.nio.ch.SelectionKeyImpl) -> b
sun.nio.ch.AllocatedNativeObject -> xx001.c:
    void free() -> a
sun.nio.ch.AsynchronousChannelGroupImpl -> xx001.d:
    int internalThreadCount -> a
    sun.nio.ch.ThreadPool pool -> b
    java.util.concurrent.atomic.AtomicInteger threadCount -> c
    java.util.concurrent.ScheduledThreadPoolExecutor timeoutExecutor -> d
    java.util.Queue taskQueue -> e
    java.util.concurrent.atomic.AtomicBoolean shutdown -> f
    java.lang.Object shutdownNowLock -> g
    boolean terminateInitiated -> h
    java.util.concurrent.ExecutorService executor() -> g
    boolean isFixedThreadPool() -> a
    int fixedThreadCount() -> h
    java.lang.Runnable bindToGroup(java.lang.Runnable) -> e
    void startInternalThread(java.lang.Runnable) -> f
    void startThreads(java.lang.Runnable) -> a
    int threadCount() -> b
    int threadExit(java.lang.Runnable,boolean) -> a
    void executeOnHandlerTask(java.lang.Runnable) -> b
    void executeOnPooledThread(java.lang.Runnable) -> c
    void offerTask(java.lang.Runnable) -> d
    java.lang.Runnable pollTask() -> c
    java.util.concurrent.Future schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> a
    boolean isShutdown() -> isShutdown
    boolean isTerminated() -> isTerminated
    boolean isEmpty() -> d
    java.lang.Object attachForeignChannel(java.nio.channels.Channel,java.io.FileDescriptor) -> a
    void detachForeignChannel(java.lang.Object) -> a
    void closeAllChannels() -> e
    void shutdownHandlerTasks() -> f
    void shutdownExecutors() -> i
    void shutdown() -> shutdown
    void shutdownNow() -> shutdownNow
    void detachFromThreadPool() -> j
    boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
    void execute(java.lang.Runnable) -> execute
    sun.nio.ch.ThreadPool access$000(sun.nio.ch.AsynchronousChannelGroupImpl) -> a
    java.util.concurrent.ScheduledThreadPoolExecutor access$100(sun.nio.ch.AsynchronousChannelGroupImpl) -> b
sun.nio.ch.AsynchronousChannelGroupImpl$1 -> xx001.e:
    sun.nio.ch.AsynchronousChannelGroupImpl val$thisGroup -> a
    java.lang.Runnable val$task -> b
    sun.nio.ch.AsynchronousChannelGroupImpl this$0 -> c
    void run() -> run
sun.nio.ch.AsynchronousChannelGroupImpl$2 -> xx001.f:
    java.lang.Runnable val$task -> a
    sun.nio.ch.AsynchronousChannelGroupImpl this$0 -> b
    java.lang.Void run() -> a
    java.lang.Object run() -> run
sun.nio.ch.AsynchronousChannelGroupImpl$3 -> xx001.g:
    sun.nio.ch.AsynchronousChannelGroupImpl this$0 -> a
    java.lang.Void run() -> a
    java.lang.Object run() -> run
sun.nio.ch.AsynchronousChannelGroupImpl$4 -> xx001.h:
    java.lang.Runnable val$delegate -> a
    java.security.AccessControlContext val$acc -> b
    sun.nio.ch.AsynchronousChannelGroupImpl this$0 -> c
    void run() -> run
sun.nio.ch.AsynchronousChannelGroupImpl$4$1 -> xx001.i:
    sun.nio.ch.AsynchronousChannelGroupImpl$4 this$1 -> a
    java.lang.Void run() -> a
    java.lang.Object run() -> run
sun.nio.ch.AsynchronousFileChannelImpl -> xx001.j:
    java.util.concurrent.locks.ReadWriteLock closeLock -> a
    boolean closed -> b
    java.io.FileDescriptor fdObj -> c
    boolean reading -> d
    boolean writing -> e
    java.util.concurrent.ExecutorService executor -> f
    sun.nio.ch.FileLockTable fileLockTable -> g
    java.util.concurrent.ExecutorService executor() -> d
    boolean isOpen() -> isOpen
    void begin() -> a
    void end() -> b
    void end(boolean) -> a
    java.util.concurrent.Future implLock(long,long,boolean,java.lang.Object,java.nio.channels.CompletionHandler) -> a
    java.util.concurrent.Future lock(long,long,boolean) -> lock
    void lock(long,long,boolean,java.lang.Object,java.nio.channels.CompletionHandler) -> lock
    void ensureFileLockTableInitialized() -> e
    void invalidateAllLocks() -> c
    sun.nio.ch.FileLockImpl addToFileLockTable(long,long,boolean) -> a
    void removeFromFileLockTable(sun.nio.ch.FileLockImpl) -> a
    void implRelease(sun.nio.ch.FileLockImpl) -> b
    void release(sun.nio.ch.FileLockImpl) -> c
    java.util.concurrent.Future implRead(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler) -> a
    java.util.concurrent.Future read(java.nio.ByteBuffer,long) -> read
    void read(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler) -> read
    java.util.concurrent.Future implWrite(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler) -> b
    java.util.concurrent.Future write(java.nio.ByteBuffer,long) -> write
    void write(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler) -> write
sun.nio.ch.AsynchronousServerSocketChannelImpl -> xx001.k:
    java.io.FileDescriptor fd -> a
    java.net.InetSocketAddress localAddress -> b
    java.lang.Object stateLock -> c
    java.util.concurrent.locks.ReadWriteLock closeLock -> d
    boolean open -> e
    boolean acceptKilled -> f
    boolean isReuseAddress -> g
    boolean isOpen() -> isOpen
    void begin() -> a
    void end() -> b
    void implClose() -> c
    void close() -> close
    java.util.concurrent.Future implAccept(java.lang.Object,java.nio.channels.CompletionHandler) -> a
    java.util.concurrent.Future accept() -> accept
    void accept(java.lang.Object,java.nio.channels.CompletionHandler) -> accept
    boolean isAcceptKilled() -> d
    void onCancel(sun.nio.ch.PendingFuture) -> a
    java.nio.channels.AsynchronousServerSocketChannel bind(java.net.SocketAddress,int) -> bind
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
    java.nio.channels.AsynchronousServerSocketChannel setOption(java.net.SocketOption,java.lang.Object) -> setOption
    java.lang.Object getOption(java.net.SocketOption) -> getOption
    java.util.Set supportedOptions() -> supportedOptions
    java.lang.String toString() -> toString
    java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object) -> setOption
sun.nio.ch.AsynchronousServerSocketChannelImpl$DefaultOptionsHolder -> xx001.l:
    java.util.Set defaultOptions -> a
    java.util.Set defaultOptions() -> a
sun.nio.ch.AsynchronousSocketChannelImpl -> xx001.m:
    java.io.FileDescriptor fd -> a
    java.lang.Object stateLock -> b
    java.net.InetSocketAddress localAddress -> c
    java.net.InetSocketAddress remoteAddress -> d
    int ST_UNINITIALIZED -> f
    int ST_UNCONNECTED -> g
    int ST_PENDING -> h
    int ST_CONNECTED -> i
    int state -> e
    java.lang.Object readLock -> j
    boolean reading -> k
    boolean readShutdown -> l
    boolean readKilled -> m
    java.lang.Object writeLock -> n
    boolean writing -> o
    boolean writeShutdown -> p
    boolean writeKilled -> q
    java.util.concurrent.locks.ReadWriteLock closeLock -> r
    boolean open -> s
    boolean isReuseAddress -> t
    boolean isOpen() -> isOpen
    void begin() -> a
    void end() -> b
    void implClose() -> c
    void close() -> close
    void enableReading(boolean) -> a
    void enableReading() -> d
    void enableWriting(boolean) -> b
    void enableWriting() -> e
    void killReading() -> f
    void killWriting() -> g
    void killConnect() -> h
    java.util.concurrent.Future implConnect(java.net.SocketAddress,java.lang.Object,java.nio.channels.CompletionHandler) -> a
    java.util.concurrent.Future connect(java.net.SocketAddress) -> connect
    void connect(java.net.SocketAddress,java.lang.Object,java.nio.channels.CompletionHandler) -> connect
    java.util.concurrent.Future implRead(boolean,java.nio.ByteBuffer,java.nio.ByteBuffer[],long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler) -> a
    java.util.concurrent.Future read(boolean,java.nio.ByteBuffer,java.nio.ByteBuffer[],long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler) -> c
    java.util.concurrent.Future read(java.nio.ByteBuffer) -> read
    void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler) -> read
    void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler) -> read
    java.util.concurrent.Future implWrite(boolean,java.nio.ByteBuffer,java.nio.ByteBuffer[],long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler) -> b
    java.util.concurrent.Future write(boolean,java.nio.ByteBuffer,java.nio.ByteBuffer[],long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler) -> d
    java.util.concurrent.Future write(java.nio.ByteBuffer) -> write
    void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler) -> write
    void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler) -> write
    java.nio.channels.AsynchronousSocketChannel bind(java.net.SocketAddress) -> bind
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
    java.nio.channels.AsynchronousSocketChannel setOption(java.net.SocketOption,java.lang.Object) -> setOption
    java.lang.Object getOption(java.net.SocketOption) -> getOption
    java.util.Set supportedOptions() -> supportedOptions
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    java.nio.channels.AsynchronousSocketChannel shutdownInput() -> shutdownInput
    java.nio.channels.AsynchronousSocketChannel shutdownOutput() -> shutdownOutput
    java.lang.String toString() -> toString
    java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object) -> setOption
    java.nio.channels.NetworkChannel bind(java.net.SocketAddress) -> bind
sun.nio.ch.AsynchronousSocketChannelImpl$DefaultOptionsHolder -> xx001.n:
    java.util.Set defaultOptions -> a
    java.util.Set defaultOptions() -> a
sun.nio.ch.BsdAsynchronousChannelProvider -> xx001.o:
    sun.nio.ch.KQueuePort defaultPort -> a
    sun.nio.ch.KQueuePort defaultEventPort() -> a
    java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(int,java.util.concurrent.ThreadFactory) -> openAsynchronousChannelGroup
    java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(java.util.concurrent.ExecutorService,int) -> openAsynchronousChannelGroup
    sun.nio.ch.Port toPort(java.nio.channels.AsynchronousChannelGroup) -> a
    java.nio.channels.AsynchronousServerSocketChannel openAsynchronousServerSocketChannel(java.nio.channels.AsynchronousChannelGroup) -> openAsynchronousServerSocketChannel
    java.nio.channels.AsynchronousSocketChannel openAsynchronousSocketChannel(java.nio.channels.AsynchronousChannelGroup) -> openAsynchronousSocketChannel
sun.nio.ch.Cancellable -> xx001.p:
    void onCancel(sun.nio.ch.PendingFuture) -> a
sun.nio.ch.ChannelInputStream -> xx001.q:
    java.nio.channels.ReadableByteChannel ch -> a
    java.nio.ByteBuffer bb -> b
    byte[] bs -> c
    byte[] b1 -> d
    int read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer) -> a
    int read() -> read
    int read(byte[],int,int) -> read
    int read(java.nio.ByteBuffer) -> a
    int available() -> available
    void close() -> close
sun.nio.ch.CompletedFuture -> xx001.r:
    java.lang.Object result -> a
    java.lang.Throwable exc -> b
    sun.nio.ch.CompletedFuture withResult(java.lang.Object) -> a
    sun.nio.ch.CompletedFuture withFailure(java.lang.Throwable) -> a
    sun.nio.ch.CompletedFuture withResult(java.lang.Object,java.lang.Throwable) -> a
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    boolean isCancelled() -> isCancelled
    boolean isDone() -> isDone
    boolean cancel(boolean) -> cancel
sun.nio.ch.DatagramChannelImpl -> xx001.DatagramChannelImpl:
    sun.nio.ch.NativeDispatcher nd -> nd
    java.io.FileDescriptor fd -> fd
    int fdVal -> fdVal
    java.net.ProtocolFamily family -> family
    long readerThread -> readerThread
    long writerThread -> writerThread
    java.net.InetAddress cachedSenderInetAddress -> cachedSenderInetAddress
    int cachedSenderPort -> cachedSenderPort
    java.lang.Object readLock -> readLock
    java.lang.Object writeLock -> writeLock
    java.lang.Object stateLock -> stateLock
    int ST_UNINITIALIZED -> ST_UNINITIALIZED
    int ST_UNCONNECTED -> ST_UNCONNECTED
    int ST_CONNECTED -> ST_CONNECTED
    int ST_KILLED -> ST_KILLED
    int state -> state
    java.net.InetSocketAddress localAddress -> localAddress
    java.net.InetSocketAddress remoteAddress -> remoteAddress
    java.net.DatagramSocket socket -> socket
    sun.nio.ch.MembershipRegistry registry -> registry
    boolean reuseAddressEmulated -> reuseAddressEmulated
    boolean isReuseAddress -> isReuseAddress
    java.net.SocketAddress sender -> sender
    boolean $assertionsDisabled -> $assertionsDisabled
    java.net.DatagramSocket socket() -> socket
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    java.nio.channels.DatagramChannel setOption(java.net.SocketOption,java.lang.Object) -> setOption
    java.lang.Object getOption(java.net.SocketOption) -> getOption
    java.util.Set supportedOptions() -> supportedOptions
    void ensureOpen() -> ensureOpen
    java.net.SocketAddress receive(java.nio.ByteBuffer) -> receive
    int receive(java.io.FileDescriptor,java.nio.ByteBuffer) -> receive
    int receiveIntoNativeBuffer(java.io.FileDescriptor,java.nio.ByteBuffer,int,int) -> receiveIntoNativeBuffer
    int send(java.nio.ByteBuffer,java.net.SocketAddress) -> send
    int send(java.io.FileDescriptor,java.nio.ByteBuffer,java.net.InetSocketAddress) -> send
    int sendFromNativeBuffer(java.io.FileDescriptor,java.nio.ByteBuffer,java.net.InetSocketAddress) -> sendFromNativeBuffer
    int read(java.nio.ByteBuffer) -> read
    long read(java.nio.ByteBuffer[],int,int) -> read
    int write(java.nio.ByteBuffer) -> write
    long write(java.nio.ByteBuffer[],int,int) -> write
    void implConfigureBlocking(boolean) -> implConfigureBlocking
    java.net.SocketAddress localAddress() -> localAddress
    java.net.SocketAddress remoteAddress() -> remoteAddress
    java.nio.channels.DatagramChannel bind(java.net.SocketAddress) -> bind
    boolean isConnected() -> isConnected
    void ensureOpenAndUnconnected() -> ensureOpenAndUnconnected
    java.nio.channels.DatagramChannel connect(java.net.SocketAddress) -> connect
    java.nio.channels.DatagramChannel disconnect() -> disconnect
    java.nio.channels.MembershipKey innerJoin(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress) -> innerJoin
    java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface) -> join
    java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress) -> join
    void drop(sun.nio.ch.MembershipKeyImpl) -> drop
    void block(sun.nio.ch.MembershipKeyImpl,java.net.InetAddress) -> block
    void unblock(sun.nio.ch.MembershipKeyImpl,java.net.InetAddress) -> unblock
    void implCloseSelectableChannel() -> implCloseSelectableChannel
    void kill() -> kill
    void finalize() -> finalize
    boolean translateReadyOps(int,int,sun.nio.ch.SelectionKeyImpl) -> translateReadyOps
    boolean translateAndUpdateReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> translateAndUpdateReadyOps
    boolean translateAndSetReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> translateAndSetReadyOps
    void translateAndSetInterestOps(int,sun.nio.ch.SelectionKeyImpl) -> translateAndSetInterestOps
    java.io.FileDescriptor getFD() -> getFD
    int getFDVal() -> getFDVal
    void initIDs() -> initIDs
    void disconnect0(java.io.FileDescriptor,boolean) -> disconnect0
    int receive0(java.io.FileDescriptor,long,int,boolean) -> receive0
    int send0(boolean,java.io.FileDescriptor,long,int,java.net.InetAddress,int) -> send0
    java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object) -> setOption
    java.nio.channels.NetworkChannel bind(java.net.SocketAddress) -> bind
sun.nio.ch.DatagramChannelImpl$DefaultOptionsHolder -> xx001.s:
    java.util.Set defaultOptions -> a
    java.util.Set defaultOptions() -> a
sun.nio.ch.DatagramDispatcher -> xx001.DatagramDispatcher:
    int read(java.io.FileDescriptor,long,int) -> read
    long readv(java.io.FileDescriptor,long,int) -> readv
    int write(java.io.FileDescriptor,long,int) -> write
    long writev(java.io.FileDescriptor,long,int) -> writev
    void close(java.io.FileDescriptor) -> close
    void preClose(java.io.FileDescriptor) -> preClose
    int read0(java.io.FileDescriptor,long,int) -> read0
    long readv0(java.io.FileDescriptor,long,int) -> readv0
    int write0(java.io.FileDescriptor,long,int) -> write0
    long writev0(java.io.FileDescriptor,long,int) -> writev0
sun.nio.ch.DatagramSocketAdaptor -> xx001.t:
    sun.nio.ch.DatagramChannelImpl dc -> a
    int timeout -> b
    java.net.DatagramSocketImpl dummyDatagramSocket -> c
    java.net.DatagramSocket create(sun.nio.ch.DatagramChannelImpl) -> a
    void connectInternal(java.net.SocketAddress) -> a
    void bind(java.net.SocketAddress) -> bind
    void connect(java.net.InetAddress,int) -> connect
    void connect(java.net.SocketAddress) -> connect
    void disconnect() -> disconnect
    boolean isBound() -> isBound
    boolean isConnected() -> isConnected
    java.net.InetAddress getInetAddress() -> getInetAddress
    int getPort() -> getPort
    void send(java.net.DatagramPacket) -> send
    java.net.SocketAddress receive(java.nio.ByteBuffer) -> a
    void receive(java.net.DatagramPacket) -> receive
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    void setSoTimeout(int) -> setSoTimeout
    int getSoTimeout() -> getSoTimeout
    void setBooleanOption(java.net.SocketOption,boolean) -> a
    void setIntOption(java.net.SocketOption,int) -> a
    boolean getBooleanOption(java.net.SocketOption) -> a
    int getIntOption(java.net.SocketOption) -> b
    void setSendBufferSize(int) -> setSendBufferSize
    int getSendBufferSize() -> getSendBufferSize
    void setReceiveBufferSize(int) -> setReceiveBufferSize
    int getReceiveBufferSize() -> getReceiveBufferSize
    void setReuseAddress(boolean) -> setReuseAddress
    boolean getReuseAddress() -> getReuseAddress
    void setBroadcast(boolean) -> setBroadcast
    boolean getBroadcast() -> getBroadcast
    void setTrafficClass(int) -> setTrafficClass
    int getTrafficClass() -> getTrafficClass
    void close() -> close
    boolean isClosed() -> isClosed
    java.nio.channels.DatagramChannel getChannel() -> getChannel
sun.nio.ch.DatagramSocketAdaptor$1 -> xx001.u:
    void create() -> create
    void bind(int,java.net.InetAddress) -> bind
    void send(java.net.DatagramPacket) -> send
    int peek(java.net.InetAddress) -> peek
    int peekData(java.net.DatagramPacket) -> peekData
    void receive(java.net.DatagramPacket) -> receive
    void setTTL(byte) -> setTTL
    byte getTTL() -> getTTL
    void setTimeToLive(int) -> setTimeToLive
    int getTimeToLive() -> getTimeToLive
    void join(java.net.InetAddress) -> join
    void leave(java.net.InetAddress) -> leave
    void joinGroup(java.net.SocketAddress,java.net.NetworkInterface) -> joinGroup
    void leaveGroup(java.net.SocketAddress,java.net.NetworkInterface) -> leaveGroup
    void close() -> close
    java.lang.Object getOption(int) -> getOption
    void setOption(int,java.lang.Object) -> setOption
sun.nio.ch.DefaultAsynchronousChannelProvider -> xx001.v:
    sun.nio.ch.Port$PollableChannel channel -> a
    int events -> b
    java.nio.channels.spi.AsynchronousChannelProvider create() -> a
    sun.nio.ch.Port$PollableChannel channel() -> b
    int events() -> c
sun.nio.ch.DefaultSelectorProvider -> xx001.w:
    sun.nio.ch.AsynchronousChannelGroupImpl group -> a
    int handlerInvokeCount -> b
    java.nio.channels.spi.SelectorProvider create() -> a
    sun.nio.ch.AsynchronousChannelGroupImpl group() -> b
    int invokeCount() -> c
    void setInvokeCount(int) -> a
    void resetInvokeCount() -> d
    void incrementInvokeCount() -> e
    sun.nio.ch.AsynchronousChannelGroupImpl access$100$22c72f9c(sun.nio.ch.DefaultSelectorProvider) -> a
sun.nio.ch.DevPollArrayWrapper -> xx001.DevPollArrayWrapper:
    short POLLIN -> POLLIN
    short POLLPRI -> POLLPRI
    short POLLOUT -> POLLOUT
    short POLLRDNORM -> POLLRDNORM
    short POLLWRNORM -> POLLWRNORM
    short POLLRDBAND -> POLLRDBAND
    short POLLWRBAND -> POLLWRBAND
    short POLLNORM -> POLLNORM
    short POLLERR -> POLLERR
    short POLLHUP -> POLLHUP
    short POLLNVAL -> POLLNVAL
    short POLLREMOVE -> POLLREMOVE
    short POLLCONN -> POLLCONN
    short SIZE_POLLFD -> SIZE_POLLFD
    short FD_OFFSET -> FD_OFFSET
    short EVENT_OFFSET -> EVENT_OFFSET
    short REVENT_OFFSET -> REVENT_OFFSET
    byte IGNORE -> IGNORE
    int OPEN_MAX -> OPEN_MAX
    int NUM_POLLFDS -> NUM_POLLFDS
    int INITIAL_PENDING_UPDATE_SIZE -> INITIAL_PENDING_UPDATE_SIZE
    int MAX_UPDATE_ARRAY_SIZE -> MAX_UPDATE_ARRAY_SIZE
    sun.nio.ch.AllocatedNativeObject pollArray -> pollArray
    long pollArrayAddress -> pollArrayAddress
    int wfd -> wfd
    int outgoingInterruptFD -> outgoingInterruptFD
    int incomingInterruptFD -> incomingInterruptFD
    int interruptedIndex -> interruptedIndex
    int updated -> updated
    java.lang.Object updateLock -> updateLock
    int updateCount -> updateCount
    int[] updateDescriptors -> updateDescriptors
    byte[] eventsLow -> eventsLow
    java.util.Map eventsHigh -> eventsHigh
    java.util.BitSet registered -> registered
    boolean interrupted -> interrupted
    boolean $assertionsDisabled -> $assertionsDisabled
    void initInterrupt(int,int) -> initInterrupt
    void putReventOps(int,int) -> putReventOps
    int getEventOps(int) -> getEventOps
    int getReventOps(int) -> getReventOps
    int getDescriptor(int) -> getDescriptor
    void setUpdateEvents(int,byte) -> setUpdateEvents
    byte getUpdateEvents(int) -> getUpdateEvents
    void setInterest(int,int) -> setInterest
    void release(int) -> release
    void closeDevPollFD() -> closeDevPollFD
    int poll(long) -> poll
    void updateRegistrations() -> updateRegistrations
    void putPollFD(sun.nio.ch.AllocatedNativeObject,int,int,short) -> putPollFD
    void interrupt() -> interrupt
    int interruptedIndex() -> interruptedIndex
    boolean interrupted() -> interrupted
    void clearInterrupted() -> clearInterrupted
    int init() -> init
    void register(int,int,int) -> register
    void registerMultiple(int,long,int) -> registerMultiple
    int poll0(long,int,long,int) -> poll0
    void interrupt(int) -> interrupt
sun.nio.ch.DevPollSelectorImpl -> xx001.x:
    int fd0 -> a
    int fd1 -> b
    sun.nio.ch.DevPollArrayWrapper pollWrapper -> c
    java.util.Map fdToKey -> f
    boolean closed -> g
    java.lang.Object closeLock -> h
    java.lang.Object interruptLock -> i
    boolean interruptTriggered -> j
    boolean $assertionsDisabled -> k
    int doSelect(long) -> a
    int updateSelectedKeys() -> b
    void implClose() -> a
    void implRegister(sun.nio.ch.SelectionKeyImpl) -> a
    void implDereg(sun.nio.ch.SelectionKeyImpl) -> b
    void putEventOps(sun.nio.ch.SelectionKeyImpl,int) -> a
    java.nio.channels.Selector wakeup() -> wakeup
sun.nio.ch.DevPollSelectorProvider -> xx001.y:
    java.nio.channels.spi.AbstractSelector openSelector() -> openSelector
    java.nio.channels.Channel inheritedChannel() -> inheritedChannel
sun.nio.ch.DirectBuffer -> xx001.z:
    long address() -> address
    java.lang.Object attachment() -> attachment
    sun.misc.Cleaner cleaner() -> cleaner
sun.nio.ch.EPoll -> xx001.EPoll:
    sun.misc.Unsafe unsafe -> unsafe
    int SIZEOF_EPOLLEVENT -> SIZEOF_EPOLLEVENT
    int OFFSETOF_EVENTS -> OFFSETOF_EVENTS
    int OFFSETOF_FD -> OFFSETOF_FD
    int EPOLL_CTL_ADD -> EPOLL_CTL_ADD
    int EPOLL_CTL_DEL -> EPOLL_CTL_DEL
    int EPOLL_CTL_MOD -> EPOLL_CTL_MOD
    int EPOLLONESHOT -> EPOLLONESHOT
    long allocatePollArray(int) -> allocatePollArray
    void freePollArray(long) -> freePollArray
    long getEvent(long,int) -> getEvent
    int getDescriptor(long) -> getDescriptor
    int getEvents(long) -> getEvents
    int eventSize() -> eventSize
    int eventsOffset() -> eventsOffset
    int dataOffset() -> dataOffset
    int epollCreate() -> epollCreate
    int epollCtl(int,int,int,int) -> epollCtl
    int epollWait(int,long,int) -> epollWait
sun.nio.ch.EPollArrayWrapper -> xx001.EPollArrayWrapper:
    int EPOLLIN -> EPOLLIN
    int EPOLL_CTL_ADD -> EPOLL_CTL_ADD
    int EPOLL_CTL_DEL -> EPOLL_CTL_DEL
    int EPOLL_CTL_MOD -> EPOLL_CTL_MOD
    int SIZE_EPOLLEVENT -> SIZE_EPOLLEVENT
    int EVENT_OFFSET -> EVENT_OFFSET
    int DATA_OFFSET -> DATA_OFFSET
    int FD_OFFSET -> FD_OFFSET
    int OPEN_MAX -> OPEN_MAX
    int NUM_EPOLLEVENTS -> NUM_EPOLLEVENTS
    byte KILLED -> KILLED
    int INITIAL_PENDING_UPDATE_SIZE -> INITIAL_PENDING_UPDATE_SIZE
    int MAX_UPDATE_ARRAY_SIZE -> MAX_UPDATE_ARRAY_SIZE
    int epfd -> epfd
    sun.nio.ch.AllocatedNativeObject pollArray -> pollArray
    long pollArrayAddress -> pollArrayAddress
    int outgoingInterruptFD -> outgoingInterruptFD
    int incomingInterruptFD -> incomingInterruptFD
    int interruptedIndex -> interruptedIndex
    int updated -> updated
    java.lang.Object updateLock -> updateLock
    int updateCount -> updateCount
    int[] updateDescriptors -> updateDescriptors
    byte[] eventsLow -> eventsLow
    java.util.Map eventsHigh -> eventsHigh
    java.util.BitSet registered -> registered
    boolean interrupted -> interrupted
    boolean $assertionsDisabled -> $assertionsDisabled
    void initInterrupt(int,int) -> initInterrupt
    void putEventOps(int,int) -> putEventOps
    void putDescriptor(int,int) -> putDescriptor
    int getEventOps(int) -> getEventOps
    int getDescriptor(int) -> getDescriptor
    void setUpdateEvents(int,byte,boolean) -> setUpdateEvents
    byte getUpdateEvents(int) -> getUpdateEvents
    void setInterest(int,int) -> setInterest
    void add(int) -> add
    void remove(int) -> remove
    void closeEPollFD() -> closeEPollFD
    int poll(long) -> poll
    void updateRegistrations() -> updateRegistrations
    void interrupt() -> interrupt
    int interruptedIndex() -> interruptedIndex
    boolean interrupted() -> interrupted
    void clearInterrupted() -> clearInterrupted
    int epollCreate() -> epollCreate
    void epollCtl(int,int,int,int) -> epollCtl
    int epollWait(long,int,long,int) -> epollWait
    int sizeofEPollEvent() -> sizeofEPollEvent
    int offsetofData() -> offsetofData
    void interrupt(int) -> interrupt
    void init() -> init
sun.nio.ch.EPollPort -> xx001.EPollPort:
    int MAX_EPOLL_EVENTS -> MAX_EPOLL_EVENTS
    int ENOENT -> ENOENT
    int epfd -> epfd
    boolean closed -> closed
    int[] sp -> sp
    java.util.concurrent.atomic.AtomicInteger wakeupCount -> wakeupCount
    long address -> address
    java.util.concurrent.ArrayBlockingQueue queue -> queue
    sun.nio.ch.DefaultAsynchronousChannelProvider NEED_TO_POLL$73bc9c60 -> NEED_TO_POLL$73bc9c60
    sun.nio.ch.DefaultAsynchronousChannelProvider EXECUTE_TASK_OR_SHUTDOWN$73bc9c60 -> EXECUTE_TASK_OR_SHUTDOWN$73bc9c60
    sun.nio.ch.EPollPort start() -> start
    void implClose() -> implClose
    void wakeup() -> wakeup
    void executeOnHandlerTask(java.lang.Runnable) -> executeOnHandlerTask
    void shutdownHandlerTasks() -> shutdownHandlerTasks
    void startPoll(int,int) -> startPoll
    void socketpair(int[]) -> socketpair
    void interrupt(int) -> interrupt
    void drain1(int) -> drain1
    void close0(int) -> close0
    int access$100(sun.nio.ch.EPollPort) -> access$100
    long access$200(sun.nio.ch.EPollPort) -> access$200
    int[] access$300(sun.nio.ch.EPollPort) -> access$300
    java.util.concurrent.atomic.AtomicInteger access$400(sun.nio.ch.EPollPort) -> access$400
    void access$500(int) -> access$500
    sun.nio.ch.DefaultAsynchronousChannelProvider access$600$5182eceb(sun.nio.ch.EPollPort) -> access$600$5182eceb
    java.util.concurrent.ArrayBlockingQueue access$700(sun.nio.ch.EPollPort) -> access$700
    sun.nio.ch.DefaultAsynchronousChannelProvider access$800$5182eceb(sun.nio.ch.EPollPort) -> access$800$5182eceb
    void access$900(sun.nio.ch.EPollPort) -> access$900
sun.nio.ch.EPollPort$1 -> xx001.A:
sun.nio.ch.EPollPort$Event -> xx001.B:
    sun.nio.ch.Port$PollableChannel channel -> a
    int events -> b
    sun.nio.ch.Port$PollableChannel channel() -> a
    int events() -> b
sun.nio.ch.EPollPort$EventHandlerTask -> xx001.C:
    sun.nio.ch.EPollPort this$0 -> a
    sun.nio.ch.DefaultAsynchronousChannelProvider poll$4509cd21() -> a
    void run() -> run
sun.nio.ch.EPollSelectorImpl -> xx001.D:
    int fd0 -> a
    int fd1 -> b
    sun.nio.ch.EPollArrayWrapper pollWrapper -> c
    java.util.Map fdToKey -> f
    boolean closed -> g
    java.lang.Object interruptLock -> h
    boolean interruptTriggered -> i
    boolean $assertionsDisabled -> j
    int doSelect(long) -> a
    int updateSelectedKeys() -> b
    void implClose() -> a
    void implRegister(sun.nio.ch.SelectionKeyImpl) -> a
    void implDereg(sun.nio.ch.SelectionKeyImpl) -> b
    void putEventOps(sun.nio.ch.SelectionKeyImpl,int) -> a
    java.nio.channels.Selector wakeup() -> wakeup
sun.nio.ch.EPollSelectorProvider -> xx001.E:
    java.nio.channels.spi.AbstractSelector openSelector() -> openSelector
    java.nio.channels.Channel inheritedChannel() -> inheritedChannel
sun.nio.ch.ExtendedSocketOption -> xx001.F:
    java.net.SocketOption SO_OOBINLINE -> a
sun.nio.ch.ExtendedSocketOption$1 -> xx001.G:
    java.lang.String name() -> name
    java.lang.Class type() -> type
    java.lang.String toString() -> toString
sun.nio.ch.FileChannelImpl -> xx001.FileChannelImpl:
    long allocationGranularity -> allocationGranularity
    sun.nio.ch.FileDispatcher nd -> nd
    java.io.FileDescriptor fd -> fd
    boolean writable -> writable
    boolean readable -> readable
    boolean append -> append
    java.lang.Object parent -> parent
    java.lang.String path -> path
    sun.nio.ch.NativeThreadSet threads -> threads
    java.lang.Object positionLock -> positionLock
    boolean transferSupported -> transferSupported
    boolean pipeSupported -> pipeSupported
    boolean fileSupported -> fileSupported
    long MAPPED_TRANSFER_SIZE -> MAPPED_TRANSFER_SIZE
    int TRANSFER_SIZE -> TRANSFER_SIZE
    int MAP_RO -> MAP_RO
    int MAP_RW -> MAP_RW
    int MAP_PV -> MAP_PV
    sun.nio.ch.FileLockTable fileLockTable -> fileLockTable
    boolean isSharedFileLockTable -> isSharedFileLockTable
    boolean propertyChecked -> propertyChecked
    boolean $assertionsDisabled -> $assertionsDisabled
    java.nio.channels.FileChannel open(java.io.FileDescriptor,java.lang.String,boolean,boolean,java.lang.Object) -> open
    java.nio.channels.FileChannel open(java.io.FileDescriptor,java.lang.String,boolean,boolean,boolean,java.lang.Object) -> open
    void ensureOpen() -> ensureOpen
    void implCloseChannel() -> implCloseChannel
    int read(java.nio.ByteBuffer) -> read
    long read(java.nio.ByteBuffer[],int,int) -> read
    int write(java.nio.ByteBuffer) -> write
    long write(java.nio.ByteBuffer[],int,int) -> write
    long position() -> position
    java.nio.channels.FileChannel position(long) -> position
    long size() -> size
    java.nio.channels.FileChannel truncate(long) -> truncate
    void force(boolean) -> force
    long transferToDirectly(long,int,java.nio.channels.WritableByteChannel) -> transferToDirectly
    long transferToTrustedChannel(long,long,java.nio.channels.WritableByteChannel) -> transferToTrustedChannel
    long transferToArbitraryChannel(long,int,java.nio.channels.WritableByteChannel) -> transferToArbitraryChannel
    long transferTo(long,long,java.nio.channels.WritableByteChannel) -> transferTo
    long transferFromFileChannel(sun.nio.ch.FileChannelImpl,long,long) -> transferFromFileChannel
    long transferFromArbitraryChannel(java.nio.channels.ReadableByteChannel,long,long) -> transferFromArbitraryChannel
    long transferFrom(java.nio.channels.ReadableByteChannel,long,long) -> transferFrom
    int read(java.nio.ByteBuffer,long) -> read
    int readInternal(java.nio.ByteBuffer,long) -> readInternal
    int write(java.nio.ByteBuffer,long) -> write
    int writeInternal(java.nio.ByteBuffer,long) -> writeInternal
    void unmap(java.nio.MappedByteBuffer) -> unmap
    java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long) -> map
    boolean isSharedFileLockTable() -> isSharedFileLockTable
    sun.nio.ch.FileLockTable fileLockTable() -> fileLockTable
    java.nio.channels.FileLock lock(long,long,boolean) -> lock
    java.nio.channels.FileLock tryLock(long,long,boolean) -> tryLock
    void release(sun.nio.ch.FileLockImpl) -> release
    long map0(int,long,long) -> map0
    int unmap0(long,long) -> unmap0
    long transferTo0(int,long,long,int) -> transferTo0
    long position0(java.io.FileDescriptor,long) -> position0
    long initIDs() -> initIDs
    java.nio.channels.SeekableByteChannel truncate(long) -> truncate
    java.nio.channels.SeekableByteChannel position(long) -> position
    int access$000(long,long) -> access$000
sun.nio.ch.FileChannelImpl$1 -> xx001.H:
sun.nio.ch.FileChannelImpl$SimpleFileLockTable -> xx001.I:
    java.util.List lockList -> a
    boolean $assertionsDisabled -> b
    void checkList(long,long) -> a
    void add(java.nio.channels.FileLock) -> a
    void remove(java.nio.channels.FileLock) -> b
    java.util.List removeAll() -> a
    void replace(java.nio.channels.FileLock,java.nio.channels.FileLock) -> a
sun.nio.ch.FileChannelImpl$Unmapper -> xx001.J:
    sun.nio.ch.NativeDispatcher nd -> a
    int count -> b
    long totalSize -> c
    long totalCapacity -> d
    long address -> e
    long size -> f
    int cap -> g
    java.io.FileDescriptor fd -> h
    boolean $assertionsDisabled -> i
    void run() -> run
sun.nio.ch.FileDispatcher -> xx001.K:
    int NO_LOCK -> a
    int LOCKED -> b
    int RET_EX_LOCK -> c
    int INTERRUPTED -> d
    int force(java.io.FileDescriptor,boolean) -> a
    int truncate(java.io.FileDescriptor,long) -> a
    long size(java.io.FileDescriptor) -> c
    int lock(java.io.FileDescriptor,boolean,long,long,boolean) -> a
    void release(java.io.FileDescriptor,long,long) -> a
    java.io.FileDescriptor duplicateForMapping$1f011b01() -> a
sun.nio.ch.FileDispatcherImpl -> xx001.FileDispatcherImpl:
    int read(java.io.FileDescriptor,long,int) -> read
    int pread(java.io.FileDescriptor,long,int,long) -> pread
    long readv(java.io.FileDescriptor,long,int) -> readv
    int write(java.io.FileDescriptor,long,int) -> write
    int pwrite(java.io.FileDescriptor,long,int,long) -> pwrite
    long writev(java.io.FileDescriptor,long,int) -> writev
    int force(java.io.FileDescriptor,boolean) -> force
    int truncate(java.io.FileDescriptor,long) -> truncate
    long size(java.io.FileDescriptor) -> size
    int lock(java.io.FileDescriptor,boolean,long,long,boolean) -> lock
    void release(java.io.FileDescriptor,long,long) -> release
    void close(java.io.FileDescriptor) -> close
    void preClose(java.io.FileDescriptor) -> preClose
    java.io.FileDescriptor duplicateForMapping$1f011b01() -> duplicateForMapping$1f011b01
    int read0(java.io.FileDescriptor,long,int) -> read0
    int pread0(java.io.FileDescriptor,long,int,long) -> pread0
    long readv0(java.io.FileDescriptor,long,int) -> readv0
    int write0(java.io.FileDescriptor,long,int) -> write0
    int pwrite0(java.io.FileDescriptor,long,int,long) -> pwrite0
    long writev0(java.io.FileDescriptor,long,int) -> writev0
    int force0(java.io.FileDescriptor,boolean) -> force0
    int truncate0(java.io.FileDescriptor,long) -> truncate0
    long size0(java.io.FileDescriptor) -> size0
    int lock0(java.io.FileDescriptor,boolean,long,long,boolean) -> lock0
    void release0(java.io.FileDescriptor,long,long) -> release0
    void close0(java.io.FileDescriptor) -> close0
    void preClose0(java.io.FileDescriptor) -> preClose0
    void closeIntFD(int) -> closeIntFD
    void init() -> init
sun.nio.ch.FileKey -> xx001.FileKey:
    long st_dev -> st_dev
    long st_ino -> st_ino
    sun.nio.ch.FileKey create(java.io.FileDescriptor) -> create
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void init(java.io.FileDescriptor) -> init
    void initIDs() -> initIDs
sun.nio.ch.FileLockImpl -> xx001.L:
    boolean valid -> a
    boolean $assertionsDisabled -> b
    boolean isValid() -> isValid
    void invalidate() -> a
    void release() -> release
sun.nio.ch.FileLockTable -> xx001.M:
    sun.nio.ch.FileLockTable newSharedFileLockTable(java.nio.channels.Channel,java.io.FileDescriptor) -> a
    void add(java.nio.channels.FileLock) -> a
    void remove(java.nio.channels.FileLock) -> b
    java.util.List removeAll() -> a
    void replace(java.nio.channels.FileLock,java.nio.channels.FileLock) -> a
sun.nio.ch.Groupable -> xx001.N:
    sun.nio.ch.AsynchronousChannelGroupImpl group() -> i
sun.nio.ch.IOStatus -> xx001.O:
    int EOF -> c
    int UNAVAILABLE -> d
    int INTERRUPTED -> e
    int UNSUPPORTED -> f
    int THROWN -> g
    int UNSUPPORTED_CASE -> h
    sun.nio.ch.Port$PollableChannel channel -> a
    int events -> b
    int normalize(int) -> a
    boolean check(int) -> b
    long normalize(long) -> a
    boolean check(long) -> b
    boolean checkAll(long) -> c
    sun.nio.ch.Port$PollableChannel channel() -> a
    int events() -> b
sun.nio.ch.IOUtil -> xx001.IOUtil:
    int IOV_MAX -> IOV_MAX
    boolean $assertionsDisabled -> $assertionsDisabled
    int write(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher) -> write
    int writeFromNativeBuffer(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher) -> writeFromNativeBuffer
    long write(java.io.FileDescriptor,java.nio.ByteBuffer[],sun.nio.ch.NativeDispatcher) -> write
    long write(java.io.FileDescriptor,java.nio.ByteBuffer[],int,int,sun.nio.ch.NativeDispatcher) -> write
    int read(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher) -> read
    int readIntoNativeBuffer(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher) -> readIntoNativeBuffer
    long read(java.io.FileDescriptor,java.nio.ByteBuffer[],sun.nio.ch.NativeDispatcher) -> read
    long read(java.io.FileDescriptor,java.nio.ByteBuffer[],int,int,sun.nio.ch.NativeDispatcher) -> read
    java.io.FileDescriptor newFD(int) -> newFD
    boolean randomBytes(byte[]) -> randomBytes
    long makePipe(boolean) -> makePipe
    boolean drain(int) -> drain
    void configureBlocking(java.io.FileDescriptor,boolean) -> configureBlocking
    int fdVal(java.io.FileDescriptor) -> fdVal
    void setfdVal(java.io.FileDescriptor,int) -> setfdVal
    int iovMax() -> iovMax
    int fdLimit() -> fdLimit
    void initIDs() -> initIDs
sun.nio.ch.IOVecWrapper -> xx001.P:
    int BASE_OFFSET -> b
    int LEN_OFFSET -> c
    int SIZE_IOVEC -> d
    sun.nio.ch.AllocatedNativeObject vecArray -> e
    int size -> f
    java.nio.ByteBuffer[] buf -> g
    int[] position -> h
    int[] remaining -> i
    java.nio.ByteBuffer[] shadow -> j
    long address -> a
    int addressSize -> k
    java.lang.ThreadLocal cached -> l
    sun.nio.ch.IOVecWrapper get(int) -> a
    void setBuffer(int,java.nio.ByteBuffer,int,int) -> a
    void setShadow(int,java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer getBuffer(int) -> b
    int getPosition(int) -> c
    int getRemaining(int) -> d
    java.nio.ByteBuffer getShadow(int) -> e
    void clearRefs(int) -> f
    void putBase(int,long) -> a
    void putLen(int,long) -> b
sun.nio.ch.IOVecWrapper$Deallocator -> xx001.Q:
    sun.nio.ch.AllocatedNativeObject obj -> a
    void run() -> run
sun.nio.ch.InheritedChannel -> xx001.InheritedChannel:
    int UNKNOWN -> UNKNOWN
    int SOCK_STREAM -> SOCK_STREAM
    int SOCK_DGRAM -> SOCK_DGRAM
    int O_RDONLY -> O_RDONLY
    int O_WRONLY -> O_WRONLY
    int O_RDWR -> O_RDWR
    int devnull -> devnull
    boolean haveChannel -> haveChannel
    java.nio.channels.Channel channel -> channel
    boolean $assertionsDisabled -> $assertionsDisabled
    void detachIOStreams() -> detachIOStreams
    void checkAccess$14b2a460() -> checkAccess$14b2a460
    java.nio.channels.Channel createChannel() -> createChannel
    java.nio.channels.Channel getChannel() -> getChannel
    int dup(int) -> dup
    void dup2(int,int) -> dup2
    int open0(java.lang.String,int) -> open0
    void close0(int) -> close0
    int soType0(int) -> soType0
    java.net.InetAddress peerAddress0(int) -> peerAddress0
    int peerPort0(int) -> peerPort0
    void access$000() -> access$000
sun.nio.ch.InheritedChannel$InheritedDatagramChannelImpl -> xx001.R:
    void implCloseSelectableChannel() -> implCloseSelectableChannel
    int getFDVal() -> e
    java.io.FileDescriptor getFD() -> d
    void translateAndSetInterestOps(int,sun.nio.ch.SelectionKeyImpl) -> c
    boolean translateAndSetReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> b
    boolean translateAndUpdateReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> a
    boolean translateReadyOps(int,int,sun.nio.ch.SelectionKeyImpl) -> a
    void kill() -> c
    java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress) -> join
    java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface) -> join
    java.nio.channels.DatagramChannel disconnect() -> disconnect
    java.nio.channels.DatagramChannel connect(java.net.SocketAddress) -> connect
    boolean isConnected() -> isConnected
    java.nio.channels.DatagramChannel bind(java.net.SocketAddress) -> bind
    java.net.SocketAddress remoteAddress() -> b
    java.net.SocketAddress localAddress() -> a
    long write(java.nio.ByteBuffer[],int,int) -> write
    int write(java.nio.ByteBuffer) -> write
    long read(java.nio.ByteBuffer[],int,int) -> read
    int read(java.nio.ByteBuffer) -> read
    int send(java.nio.ByteBuffer,java.net.SocketAddress) -> send
    java.net.SocketAddress receive(java.nio.ByteBuffer) -> receive
    java.lang.Object getOption(java.net.SocketOption) -> getOption
    java.nio.channels.DatagramChannel setOption(java.net.SocketOption,java.lang.Object) -> setOption
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
    java.net.DatagramSocket socket() -> socket
sun.nio.ch.InheritedChannel$InheritedServerSocketChannelImpl -> xx001.S:
    void implCloseSelectableChannel() -> implCloseSelectableChannel
    java.lang.String toString() -> toString
    int getFDVal() -> e
    java.io.FileDescriptor getFD() -> d
    void translateAndSetInterestOps(int,sun.nio.ch.SelectionKeyImpl) -> c
    boolean translateAndSetReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> b
    boolean translateAndUpdateReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> a
    boolean translateReadyOps(int,int,sun.nio.ch.SelectionKeyImpl) -> a
    void kill() -> c
    java.nio.channels.SocketChannel accept() -> accept
    java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress,int) -> bind
    java.net.InetSocketAddress localAddress() -> a
    boolean isBound() -> b
    java.lang.Object getOption(java.net.SocketOption) -> getOption
    java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption,java.lang.Object) -> setOption
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
    java.net.ServerSocket socket() -> socket
sun.nio.ch.InheritedChannel$InheritedSocketChannelImpl -> xx001.T:
    void implCloseSelectableChannel() -> implCloseSelectableChannel
    java.lang.String toString() -> toString
    int getFDVal() -> e
    java.io.FileDescriptor getFD() -> d
    void translateAndSetInterestOps(int,sun.nio.ch.SelectionKeyImpl) -> c
    boolean translateAndSetReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> b
    boolean translateAndUpdateReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> a
    boolean translateReadyOps(int,int,sun.nio.ch.SelectionKeyImpl) -> a
    void kill() -> c
    boolean isOutputOpen() -> a
    boolean isInputOpen() -> b
    java.nio.channels.SocketChannel shutdownOutput() -> shutdownOutput
    java.nio.channels.SocketChannel shutdownInput() -> shutdownInput
    boolean finishConnect() -> finishConnect
    boolean connect(java.net.SocketAddress) -> connect
    boolean isConnectionPending() -> isConnectionPending
    boolean isConnected() -> isConnected
    java.nio.channels.SocketChannel bind(java.net.SocketAddress) -> bind
    java.net.SocketAddress remoteAddress() -> f
    java.net.InetSocketAddress localAddress() -> g
    long write(java.nio.ByteBuffer[],int,int) -> write
    int write(java.nio.ByteBuffer) -> write
    long read(java.nio.ByteBuffer[],int,int) -> read
    int read(java.nio.ByteBuffer) -> read
    java.lang.Object getOption(java.net.SocketOption) -> getOption
    java.nio.channels.SocketChannel setOption(java.net.SocketOption,java.lang.Object) -> setOption
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
    java.net.Socket socket() -> socket
sun.nio.ch.Interruptible -> xx001.U:
    void interrupt(java.lang.Thread) -> interrupt
sun.nio.ch.Invoker -> xx001.V:
    int maxHandlerInvokeCount -> a
    java.lang.ThreadLocal myGroupAndInvokeCount -> b
    boolean $assertionsDisabled -> c
    void bindToGroup(sun.nio.ch.AsynchronousChannelGroupImpl) -> a
    sun.nio.ch.DefaultSelectorProvider getGroupAndInvokeCount$173567a7() -> a
    boolean isBoundToAnyGroup() -> b
    boolean mayInvokeDirect$217e665a(sun.nio.ch.DefaultSelectorProvider,sun.nio.ch.AsynchronousChannelGroupImpl) -> a
    void invokeUnchecked(java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable) -> a
    void invokeDirect$24087072(sun.nio.ch.DefaultSelectorProvider,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable) -> a
    void invoke(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable) -> a
    void invokeIndirectly(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable) -> b
    void invokeIndirectly(java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable,java.util.concurrent.Executor) -> a
    void invokeOnThreadInThreadPool(sun.nio.ch.Groupable,java.lang.Runnable) -> a
    void invokeUnchecked(sun.nio.ch.PendingFuture) -> a
    void invoke(sun.nio.ch.PendingFuture) -> b
    void invokeIndirectly(sun.nio.ch.PendingFuture) -> c
    java.lang.ThreadLocal access$000() -> c
sun.nio.ch.Invoker$1 -> xx001.W:
    sun.nio.ch.DefaultSelectorProvider initialValue$173567a7() -> a
    java.lang.Object initialValue() -> initialValue
sun.nio.ch.Invoker$2 -> xx001.X:
    java.nio.channels.CompletionHandler val$handler -> a
    java.lang.Object val$attachment -> b
    java.lang.Object val$result -> c
    java.lang.Throwable val$exc -> d
    void run() -> run
sun.nio.ch.Invoker$3 -> xx001.Y:
    java.nio.channels.CompletionHandler val$handler -> a
    java.lang.Object val$attachment -> b
    java.lang.Object val$value -> c
    java.lang.Throwable val$exc -> d
    void run() -> run
sun.nio.ch.Invoker$GroupAndInvokeCount -> xx001.Z:
    sun.nio.ch.AsynchronousChannelGroupImpl group -> a
    int handlerInvokeCount -> b
    sun.nio.ch.AsynchronousChannelGroupImpl group() -> a
    int invokeCount() -> b
    void setInvokeCount(int) -> a
    void resetInvokeCount() -> c
    void incrementInvokeCount() -> d
    sun.nio.ch.AsynchronousChannelGroupImpl access$100$22c72f9c(sun.nio.ch.DefaultSelectorProvider) -> a
sun.nio.ch.KQueue -> xx001.KQueue:
    sun.misc.Unsafe unsafe -> unsafe
    int SIZEOF_KQUEUEEVENT -> SIZEOF_KQUEUEEVENT
    int OFFSET_IDENT -> OFFSET_IDENT
    int OFFSET_FILTER -> OFFSET_FILTER
    int OFFSET_FLAGS -> OFFSET_FLAGS
    int EVFILT_READ -> EVFILT_READ
    int EVFILT_WRITE -> EVFILT_WRITE
    int EV_ADD -> EV_ADD
    int EV_ONESHOT -> EV_ONESHOT
    int EV_CLEAR -> EV_CLEAR
    long allocatePollArray(int) -> allocatePollArray
    void freePollArray(long) -> freePollArray
    long getEvent(long,int) -> getEvent
    int getDescriptor(long) -> getDescriptor
    int getFilter(long) -> getFilter
    int getFlags(long) -> getFlags
    int keventSize() -> keventSize
    int identOffset() -> identOffset
    int filterOffset() -> filterOffset
    int flagsOffset() -> flagsOffset
    int kqueue() -> kqueue
    int keventRegister(int,int,int,int) -> keventRegister
    int keventPoll(int,long,int) -> keventPoll
sun.nio.ch.KQueuePort -> xx001.KQueuePort:
    int MAX_KEVENTS_TO_POLL -> MAX_KEVENTS_TO_POLL
    int kqfd -> kqfd
    boolean closed -> closed
    int[] sp -> sp
    java.util.concurrent.atomic.AtomicInteger wakeupCount -> wakeupCount
    long address -> address
    java.util.concurrent.ArrayBlockingQueue queue -> queue
    sun.nio.ch.IOStatus NEED_TO_POLL$7209a42 -> NEED_TO_POLL$7209a42
    sun.nio.ch.IOStatus EXECUTE_TASK_OR_SHUTDOWN$7209a42 -> EXECUTE_TASK_OR_SHUTDOWN$7209a42
    sun.nio.ch.KQueuePort start() -> start
    void implClose() -> implClose
    void wakeup() -> wakeup
    void executeOnHandlerTask(java.lang.Runnable) -> executeOnHandlerTask
    void shutdownHandlerTasks() -> shutdownHandlerTasks
    void startPoll(int,int) -> startPoll
    void socketpair(int[]) -> socketpair
    void interrupt(int) -> interrupt
    void drain1(int) -> drain1
    void close0(int) -> close0
    int access$100(sun.nio.ch.KQueuePort) -> access$100
    long access$200(sun.nio.ch.KQueuePort) -> access$200
    int[] access$300(sun.nio.ch.KQueuePort) -> access$300
    java.util.concurrent.atomic.AtomicInteger access$400(sun.nio.ch.KQueuePort) -> access$400
    void access$500(int) -> access$500
    sun.nio.ch.IOStatus access$600$15901aa1(sun.nio.ch.KQueuePort) -> access$600$15901aa1
    java.util.concurrent.ArrayBlockingQueue access$700(sun.nio.ch.KQueuePort) -> access$700
    sun.nio.ch.IOStatus access$800$15901aa1(sun.nio.ch.KQueuePort) -> access$800$15901aa1
    void access$900(sun.nio.ch.KQueuePort) -> access$900
sun.nio.ch.KQueuePort$1 -> xx001.aa:
sun.nio.ch.KQueuePort$Event -> xx001.ab:
    sun.nio.ch.Port$PollableChannel channel -> a
    int events -> b
    sun.nio.ch.Port$PollableChannel channel() -> a
    int events() -> b
sun.nio.ch.KQueuePort$EventHandlerTask -> xx001.ac:
    sun.nio.ch.KQueuePort this$0 -> a
    sun.nio.ch.IOStatus poll$58e62c5d() -> a
    void run() -> run
sun.nio.ch.LinuxAsynchronousChannelProvider -> xx001.ad:
    sun.nio.ch.EPollPort defaultPort -> a
    sun.nio.ch.EPollPort defaultEventPort() -> a
    java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(int,java.util.concurrent.ThreadFactory) -> openAsynchronousChannelGroup
    java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(java.util.concurrent.ExecutorService,int) -> openAsynchronousChannelGroup
    sun.nio.ch.Port toPort(java.nio.channels.AsynchronousChannelGroup) -> a
    java.nio.channels.AsynchronousServerSocketChannel openAsynchronousServerSocketChannel(java.nio.channels.AsynchronousChannelGroup) -> openAsynchronousServerSocketChannel
    java.nio.channels.AsynchronousSocketChannel openAsynchronousSocketChannel(java.nio.channels.AsynchronousChannelGroup) -> openAsynchronousSocketChannel
sun.nio.ch.MembershipKeyImpl -> xx001.ae:
    java.nio.channels.MulticastChannel ch -> a
    java.net.InetAddress group -> b
    java.net.NetworkInterface interf -> c
    java.net.InetAddress source -> d
    boolean valid -> e
    java.lang.Object stateLock -> f
    java.util.HashSet blockedSet -> g
    boolean isValid() -> isValid
    void invalidate() -> a
    void drop() -> drop
    java.nio.channels.MulticastChannel channel() -> channel
    java.net.InetAddress group() -> group
    java.net.NetworkInterface networkInterface() -> networkInterface
    java.net.InetAddress sourceAddress() -> sourceAddress
    java.nio.channels.MembershipKey block(java.net.InetAddress) -> block
    java.nio.channels.MembershipKey unblock(java.net.InetAddress) -> unblock
    java.lang.String toString() -> toString
sun.nio.ch.MembershipKeyImpl$1 -> xx001.af:
sun.nio.ch.MembershipKeyImpl$Type4 -> xx001.ag:
    int groupAddress -> a
    int interfAddress -> b
    int sourceAddress -> c
    int groupAddress() -> b
    int interfaceAddress() -> c
    int source() -> d
sun.nio.ch.MembershipKeyImpl$Type6 -> xx001.ah:
    byte[] groupAddress -> a
    int index -> b
    byte[] sourceAddress -> c
    byte[] groupAddress() -> b
    int index() -> c
    byte[] source() -> d
sun.nio.ch.MembershipRegistry -> xx001.ai:
    java.util.Map groups -> a
    java.nio.channels.MembershipKey checkMembership(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress) -> a
    void add(sun.nio.ch.MembershipKeyImpl) -> a
    void remove(sun.nio.ch.MembershipKeyImpl) -> b
    void invalidateAll() -> a
sun.nio.ch.NativeDispatcher -> xx001.aj:
    int read(java.io.FileDescriptor,long,int) -> a
    boolean needsPositionLock() -> b
    int pread(java.io.FileDescriptor,long,int,long) -> a
    long readv(java.io.FileDescriptor,long,int) -> b
    int write(java.io.FileDescriptor,long,int) -> c
    int pwrite(java.io.FileDescriptor,long,int,long) -> b
    long writev(java.io.FileDescriptor,long,int) -> d
    void close(java.io.FileDescriptor) -> a
    void preClose(java.io.FileDescriptor) -> b
sun.nio.ch.NativeObject -> xx001.ak:
    sun.misc.Unsafe unsafe -> a
    long allocationAddress -> b
    long address -> c
    java.nio.ByteOrder byteOrder -> d
    int pageSize -> e
    boolean $assertionsDisabled -> f
    long address() -> b
    long allocationAddress() -> a
    sun.nio.ch.NativeObject subObject(int) -> c
    sun.nio.ch.NativeObject getObject(int) -> d
    void putObject(int,sun.nio.ch.NativeObject) -> a
    byte getByte(int) -> e
    void putByte(int,byte) -> a
    short getShort(int) -> a
    void putShort(int,short) -> a
    char getChar(int) -> f
    void putChar(int,char) -> a
    int getInt(int) -> b
    void putInt(int,int) -> a
    long getLong(int) -> g
    void putLong(int,long) -> a
    float getFloat(int) -> h
    void putFloat(int,float) -> a
    double getDouble(int) -> i
    void putDouble(int,double) -> a
    int addressSize() -> c
    java.nio.ByteOrder byteOrder() -> d
    int pageSize() -> e
sun.nio.ch.NativeThread -> xx001.NativeThread:
    long current() -> current
    void signal(long) -> signal
    void init() -> init
sun.nio.ch.NativeThreadSet -> xx001.al:
    long[] elts -> a
    int used -> b
    boolean waitingToEmpty -> c
    boolean $assertionsDisabled -> d
    int add() -> a
    void remove(int) -> a
    void signalAndWait() -> b
sun.nio.ch.Net -> xx001.Net:
    java.net.ProtocolFamily UNSPEC -> UNSPEC
    boolean revealLocalAddress -> revealLocalAddress
    boolean propRevealLocalAddress -> propRevealLocalAddress
    boolean exclusiveBind -> exclusiveBind
    boolean checkedIPv6 -> checkedIPv6
    boolean isIPv6Available -> isIPv6Available
    int SHUT_RD -> SHUT_RD
    int SHUT_WR -> SHUT_WR
    int SHUT_RDWR -> SHUT_RDWR
    boolean isIPv6Available() -> isIPv6Available
    boolean useExclusiveBind() -> useExclusiveBind
    boolean canIPv6SocketJoinIPv4Group() -> canIPv6SocketJoinIPv4Group
    boolean canJoin6WithIPv4Group() -> canJoin6WithIPv4Group
    java.net.InetSocketAddress checkAddress(java.net.SocketAddress) -> checkAddress
    java.net.InetSocketAddress asInetSocketAddress(java.net.SocketAddress) -> asInetSocketAddress
    void translateToSocketException(java.lang.Exception) -> translateToSocketException
    void translateException(java.lang.Exception,boolean) -> translateException
    void translateException(java.lang.Exception) -> translateException
    java.net.InetSocketAddress getRevealedLocalAddress(java.net.InetSocketAddress) -> getRevealedLocalAddress
    java.lang.String getRevealedLocalAddressAsString(java.net.InetSocketAddress) -> getRevealedLocalAddressAsString
    boolean getRevealLocalAddress() -> getRevealLocalAddress
    java.net.InetSocketAddress getLoopbackAddress(int) -> getLoopbackAddress
    java.net.Inet4Address anyInet4Address(java.net.NetworkInterface) -> anyInet4Address
    int inet4AsInt(java.net.InetAddress) -> inet4AsInt
    java.net.InetAddress inet4FromInt(int) -> inet4FromInt
    byte[] inet6AsByteArray(java.net.InetAddress) -> inet6AsByteArray
    void setSocketOption(java.io.FileDescriptor,java.net.ProtocolFamily,java.net.SocketOption,java.lang.Object) -> setSocketOption
    java.lang.Object getSocketOption(java.io.FileDescriptor,java.net.ProtocolFamily,java.net.SocketOption) -> getSocketOption
    boolean isIPv6Available0() -> isIPv6Available0
    int isExclusiveBindAvailable() -> isExclusiveBindAvailable
    boolean canIPv6SocketJoinIPv4Group0() -> canIPv6SocketJoinIPv4Group0
    boolean canJoin6WithIPv4Group0() -> canJoin6WithIPv4Group0
    java.io.FileDescriptor socket(boolean) -> socket
    java.io.FileDescriptor socket(java.net.ProtocolFamily,boolean) -> socket
    java.io.FileDescriptor serverSocket(boolean) -> serverSocket
    int socket0(boolean,boolean,boolean) -> socket0
    void bind(java.io.FileDescriptor,java.net.InetAddress,int) -> bind
    void bind(java.net.ProtocolFamily,java.io.FileDescriptor,java.net.InetAddress,int) -> bind
    void bind0(java.io.FileDescriptor,boolean,boolean,java.net.InetAddress,int) -> bind0
    void listen(java.io.FileDescriptor,int) -> listen
    int connect(java.io.FileDescriptor,java.net.InetAddress,int) -> connect
    int connect(java.net.ProtocolFamily,java.io.FileDescriptor,java.net.InetAddress,int) -> connect
    int connect0(boolean,java.io.FileDescriptor,java.net.InetAddress,int) -> connect0
    void shutdown(java.io.FileDescriptor,int) -> shutdown
    int localPort(java.io.FileDescriptor) -> localPort
    java.net.InetAddress localInetAddress(java.io.FileDescriptor) -> localInetAddress
    java.net.InetSocketAddress localAddress(java.io.FileDescriptor) -> localAddress
    int remotePort(java.io.FileDescriptor) -> remotePort
    java.net.InetAddress remoteInetAddress(java.io.FileDescriptor) -> remoteInetAddress
    java.net.InetSocketAddress remoteAddress(java.io.FileDescriptor) -> remoteAddress
    int getIntOption0(java.io.FileDescriptor,boolean,int,int) -> getIntOption0
    void setIntOption0(java.io.FileDescriptor,boolean,int,int,int) -> setIntOption0
    int join4(java.io.FileDescriptor,int,int,int) -> join4
    void drop4(java.io.FileDescriptor,int,int,int) -> drop4
    int joinOrDrop4(boolean,java.io.FileDescriptor,int,int,int) -> joinOrDrop4
    int block4(java.io.FileDescriptor,int,int,int) -> block4
    void unblock4(java.io.FileDescriptor,int,int,int) -> unblock4
    int blockOrUnblock4(boolean,java.io.FileDescriptor,int,int,int) -> blockOrUnblock4
    int join6(java.io.FileDescriptor,byte[],int,byte[]) -> join6
    void drop6(java.io.FileDescriptor,byte[],int,byte[]) -> drop6
    int joinOrDrop6(boolean,java.io.FileDescriptor,byte[],int,byte[]) -> joinOrDrop6
    int block6(java.io.FileDescriptor,byte[],int,byte[]) -> block6
    void unblock6(java.io.FileDescriptor,byte[],int,byte[]) -> unblock6
    int blockOrUnblock6(boolean,java.io.FileDescriptor,byte[],int,byte[]) -> blockOrUnblock6
    void setInterface4(java.io.FileDescriptor,int) -> setInterface4
    int getInterface4(java.io.FileDescriptor) -> getInterface4
    void setInterface6(java.io.FileDescriptor,int) -> setInterface6
    int getInterface6(java.io.FileDescriptor) -> getInterface6
    void initIDs() -> initIDs
sun.nio.ch.Net$1 -> xx001.am:
    java.lang.String name() -> name
sun.nio.ch.Net$2 -> xx001.an:
    java.lang.String run() -> a
    java.lang.Object run() -> run
sun.nio.ch.Net$3 -> xx001.ao:
    java.lang.String run() -> a
    java.lang.Object run() -> run
sun.nio.ch.Net$4 -> xx001.ap:
    java.net.NetworkInterface val$interf -> a
    java.net.Inet4Address run() -> a
    java.lang.Object run() -> run
sun.nio.ch.OptionKey -> xx001.aq:
    int level -> a
    int name -> b
    int level() -> a
    int name() -> b
    void setAccessible(java.lang.reflect.AccessibleObject) -> a
    java.lang.reflect.Constructor lookupConstructor(java.lang.String,java.lang.Class[]) -> a
    java.lang.Object invoke(java.lang.reflect.Constructor,java.lang.Object[]) -> a
    java.lang.reflect.Method lookupMethod(java.lang.String,java.lang.String,java.lang.Class[]) -> a
    java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> a
    java.lang.Object invokeIO(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> b
    java.lang.reflect.Field lookupField(java.lang.String,java.lang.String) -> a
    java.lang.Object get(java.lang.Object,java.lang.reflect.Field) -> a
    java.lang.Object get(java.lang.reflect.Field) -> a
    void set(java.lang.Object,java.lang.reflect.Field,java.lang.Object) -> a
    void setInt(java.lang.Object,java.lang.reflect.Field,int) -> a
    void setBoolean(java.lang.Object,java.lang.reflect.Field,boolean) -> a
sun.nio.ch.PendingFuture -> xx001.ar:
    java.util.concurrent.CancellationException CANCELLED -> a
    java.nio.channels.AsynchronousChannel channel -> b
    java.nio.channels.CompletionHandler handler -> c
    java.lang.Object attachment -> d
    boolean haveResult -> e
    java.lang.Object result -> f
    java.lang.Throwable exc -> g
    java.util.concurrent.CountDownLatch latch -> h
    java.util.concurrent.Future timeoutTask -> i
    java.lang.Object context -> j
    java.nio.channels.AsynchronousChannel channel() -> a
    java.nio.channels.CompletionHandler handler() -> b
    java.lang.Object attachment() -> c
    void setContext(java.lang.Object) -> a
    java.lang.Object getContext() -> d
    void setTimeoutTask(java.util.concurrent.Future) -> a
    boolean prepareForWait() -> g
    void setResult(java.lang.Object) -> b
    void setFailure(java.lang.Throwable) -> a
    void setResult(java.lang.Object,java.lang.Throwable) -> a
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    java.lang.Throwable exception() -> e
    java.lang.Object value() -> f
    boolean isCancelled() -> isCancelled
    boolean isDone() -> isDone
    boolean cancel(boolean) -> cancel
sun.nio.ch.PipeImpl -> xx001.as:
    java.nio.channels.Pipe$SourceChannel source -> a
    java.nio.channels.Pipe$SinkChannel sink -> b
    java.nio.channels.Pipe$SourceChannel source() -> source
    java.nio.channels.Pipe$SinkChannel sink() -> sink
sun.nio.ch.PollArrayWrapper -> xx001.PollArrayWrapper:
    short POLLCONN -> POLLCONN
    int interruptFD -> interruptFD
    void initInterrupt(int,int) -> initInterrupt
    void release$13462e() -> release$13462e
    void free() -> free
    void addEntry(sun.nio.ch.SelChImpl) -> addEntry
    void replaceEntry(sun.nio.ch.PollArrayWrapper,int,sun.nio.ch.PollArrayWrapper,int) -> replaceEntry
    void grow(int) -> grow
    int poll(int,int,long) -> poll
    void interrupt() -> interrupt
    int poll0(long,int,long) -> poll0
    void interrupt(int) -> interrupt
sun.nio.ch.PollSelectorImpl -> xx001.at:
    int fd0 -> f
    int fd1 -> g
    java.lang.Object interruptLock -> h
    boolean interruptTriggered -> i
    int doSelect(long) -> a
    void implCloseInterrupt() -> b
    java.nio.channels.Selector wakeup() -> wakeup
sun.nio.ch.PollSelectorProvider -> xx001.au:
    java.nio.channels.spi.AbstractSelector openSelector() -> openSelector
    java.nio.channels.Channel inheritedChannel() -> inheritedChannel
sun.nio.ch.Port -> xx001.av:
    short POLLIN -> c
    short POLLOUT -> d
    short POLLERR -> e
    short POLLHUP -> f
    java.util.concurrent.locks.ReadWriteLock fdToChannelLock -> a
    java.util.Map fdToChannel -> b
    void register(int,sun.nio.ch.Port$PollableChannel) -> a
    void unregister(int) -> b
    void startPoll(int,int) -> a
    boolean isEmpty() -> d
    java.lang.Object attachForeignChannel(java.nio.channels.Channel,java.io.FileDescriptor) -> a
    void detachForeignChannel(java.lang.Object) -> a
    void closeAllChannels() -> e
sun.nio.ch.Port$1 -> xx001.aw:
    java.nio.channels.Channel val$channel -> a
    sun.nio.ch.Port this$0 -> b
    void onEvent(int,boolean) -> a
    void close() -> close
sun.nio.ch.Port$PollableChannel -> xx001.ax:
    void onEvent(int,boolean) -> a
sun.nio.ch.Reflect -> xx001.ay:
    void setAccessible(java.lang.reflect.AccessibleObject) -> a
    java.lang.reflect.Constructor lookupConstructor(java.lang.String,java.lang.Class[]) -> a
    java.lang.Object invoke(java.lang.reflect.Constructor,java.lang.Object[]) -> a
    java.lang.reflect.Method lookupMethod(java.lang.String,java.lang.String,java.lang.Class[]) -> a
    java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> a
    java.lang.Object invokeIO(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> b
    java.lang.reflect.Field lookupField(java.lang.String,java.lang.String) -> a
    java.lang.Object get(java.lang.Object,java.lang.reflect.Field) -> a
    java.lang.Object get(java.lang.reflect.Field) -> a
    void set(java.lang.Object,java.lang.reflect.Field,java.lang.Object) -> a
    void setInt(java.lang.Object,java.lang.reflect.Field,int) -> a
    void setBoolean(java.lang.Object,java.lang.reflect.Field,boolean) -> a
sun.nio.ch.Reflect$1 -> xx001.az:
    java.lang.reflect.AccessibleObject val$ao -> a
    java.lang.Void run() -> a
    java.lang.Object run() -> run
sun.nio.ch.Reflect$ReflectionError -> xx001.aA:
    long serialVersionUID -> a
sun.nio.ch.SelChImpl -> xx001.aB:
    java.io.FileDescriptor getFD() -> d
    int getFDVal() -> e
    boolean translateAndUpdateReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> a
    boolean translateAndSetReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> b
    void translateAndSetInterestOps(int,sun.nio.ch.SelectionKeyImpl) -> c
    int validOps() -> validOps
    void kill() -> c
sun.nio.ch.SelectionKeyImpl -> xx001.aC:
    sun.nio.ch.SelChImpl channel -> a
    sun.nio.ch.SelectorImpl selector -> b
    int index -> c
    int interestOps -> d
    int readyOps -> e
    java.nio.channels.SelectableChannel channel() -> channel
    java.nio.channels.Selector selector() -> selector
    int getIndex() -> a
    void setIndex(int) -> a
    void ensureValid() -> d
    int interestOps() -> interestOps
    java.nio.channels.SelectionKey interestOps(int) -> interestOps
    int readyOps() -> readyOps
    void nioReadyOps(int) -> b
    int nioReadyOps() -> b
    java.nio.channels.SelectionKey nioInterestOps(int) -> c
    int nioInterestOps() -> c
sun.nio.ch.SelectorImpl -> xx001.aD:
    java.util.Set selectedKeys -> d
    java.util.HashSet keys -> e
    java.util.Set publicKeys -> a
    java.util.Set publicSelectedKeys -> b
    java.util.Set keys() -> keys
    java.util.Set selectedKeys() -> selectedKeys
    int doSelect(long) -> a
    int lockAndDoSelect(long) -> b
    int select(long) -> select
    int select() -> select
    int selectNow() -> selectNow
    void implCloseSelector() -> implCloseSelector
    void implClose() -> a
    void putEventOps(sun.nio.ch.SelectionKeyImpl,int) -> a
    java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel,int,java.lang.Object) -> register
    void implRegister(sun.nio.ch.SelectionKeyImpl) -> a
    void processDeregisterQueue() -> d
    void implDereg(sun.nio.ch.SelectionKeyImpl) -> b
    java.nio.channels.Selector wakeup() -> wakeup
sun.nio.ch.SelectorProviderImpl -> xx001.aE:
    java.nio.channels.DatagramChannel openDatagramChannel() -> openDatagramChannel
    java.nio.channels.DatagramChannel openDatagramChannel(java.net.ProtocolFamily) -> openDatagramChannel
    java.nio.channels.Pipe openPipe() -> openPipe
    java.nio.channels.spi.AbstractSelector openSelector() -> openSelector
    java.nio.channels.ServerSocketChannel openServerSocketChannel() -> openServerSocketChannel
    java.nio.channels.SocketChannel openSocketChannel() -> openSocketChannel
sun.nio.ch.ServerSocketAdaptor -> xx001.aF:
    sun.nio.ch.ServerSocketChannelImpl ssc -> a
    int timeout -> b
    boolean $assertionsDisabled -> c
    java.net.ServerSocket create(sun.nio.ch.ServerSocketChannelImpl) -> a
    void bind(java.net.SocketAddress) -> bind
    void bind(java.net.SocketAddress,int) -> bind
    java.net.InetAddress getInetAddress() -> getInetAddress
    int getLocalPort() -> getLocalPort
    java.net.Socket accept() -> accept
    void close() -> close
    java.nio.channels.ServerSocketChannel getChannel() -> getChannel
    boolean isBound() -> isBound
    boolean isClosed() -> isClosed
    void setSoTimeout(int) -> setSoTimeout
    int getSoTimeout() -> getSoTimeout
    void setReuseAddress(boolean) -> setReuseAddress
    boolean getReuseAddress() -> getReuseAddress
    java.lang.String toString() -> toString
    void setReceiveBufferSize(int) -> setReceiveBufferSize
    int getReceiveBufferSize() -> getReceiveBufferSize
sun.nio.ch.ServerSocketChannelImpl -> xx001.ServerSocketChannelImpl:
    sun.nio.ch.NativeDispatcher nd -> nd
    java.io.FileDescriptor fd -> fd
    int fdVal -> fdVal
    long thread -> thread
    java.lang.Object lock -> lock
    java.lang.Object stateLock -> stateLock
    int ST_UNINITIALIZED -> ST_UNINITIALIZED
    int ST_INUSE -> ST_INUSE
    int ST_KILLED -> ST_KILLED
    int state -> state
    java.net.InetSocketAddress localAddress -> localAddress
    boolean isReuseAddress -> isReuseAddress
    java.net.ServerSocket socket -> socket
    boolean $assertionsDisabled -> $assertionsDisabled
    java.net.ServerSocket socket() -> socket
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
    java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption,java.lang.Object) -> setOption
    java.lang.Object getOption(java.net.SocketOption) -> getOption
    java.util.Set supportedOptions() -> supportedOptions
    boolean isBound() -> isBound
    java.net.InetSocketAddress localAddress() -> localAddress
    java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress,int) -> bind
    java.nio.channels.SocketChannel accept() -> accept
    void implConfigureBlocking(boolean) -> implConfigureBlocking
    void implCloseSelectableChannel() -> implCloseSelectableChannel
    void kill() -> kill
    boolean translateReadyOps(int,int,sun.nio.ch.SelectionKeyImpl) -> translateReadyOps
    boolean translateAndUpdateReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> translateAndUpdateReadyOps
    boolean translateAndSetReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> translateAndSetReadyOps
    void translateAndSetInterestOps(int,sun.nio.ch.SelectionKeyImpl) -> translateAndSetInterestOps
    java.io.FileDescriptor getFD() -> getFD
    int getFDVal() -> getFDVal
    java.lang.String toString() -> toString
    int accept0(java.io.FileDescriptor,java.io.FileDescriptor,java.net.InetSocketAddress[]) -> accept0
    void initIDs() -> initIDs
    java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object) -> setOption
sun.nio.ch.ServerSocketChannelImpl$DefaultOptionsHolder -> xx001.aG:
    java.util.Set defaultOptions -> a
    java.util.Set defaultOptions() -> a
sun.nio.ch.SharedFileLockTable -> xx001.aH:
    java.util.concurrent.ConcurrentHashMap lockMap -> a
    java.lang.ref.ReferenceQueue queue -> b
    java.nio.channels.Channel channel -> c
    sun.nio.ch.FileKey fileKey -> d
    boolean $assertionsDisabled -> e
    void add(java.nio.channels.FileLock) -> a
    void removeKeyIfEmpty(sun.nio.ch.FileKey,java.util.List) -> a
    void remove(java.nio.channels.FileLock) -> b
    java.util.List removeAll() -> a
    void replace(java.nio.channels.FileLock,java.nio.channels.FileLock) -> a
    void checkList(java.util.List,long,long) -> a
    void removeStaleEntries() -> b
sun.nio.ch.SharedFileLockTable$FileLockReference -> xx001.aI:
    sun.nio.ch.FileKey fileKey -> a
    sun.nio.ch.FileKey fileKey() -> a
sun.nio.ch.SimpleAsynchronousFileChannelImpl -> xx001.aJ:
    sun.nio.ch.FileDispatcher nd -> g
    sun.nio.ch.NativeThreadSet threads -> h
    java.nio.channels.AsynchronousFileChannel open(java.io.FileDescriptor,boolean,boolean,sun.nio.ch.ThreadPool) -> a
    void close() -> close
    long size() -> size
    java.nio.channels.AsynchronousFileChannel truncate(long) -> truncate
    void force(boolean) -> force
    java.util.concurrent.Future implLock(long,long,boolean,java.lang.Object,java.nio.channels.CompletionHandler) -> a
    java.nio.channels.FileLock tryLock(long,long,boolean) -> tryLock
    void implRelease(sun.nio.ch.FileLockImpl) -> b
    java.util.concurrent.Future implRead(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler) -> a
    java.util.concurrent.Future implWrite(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler) -> b
    sun.nio.ch.NativeThreadSet access$000(sun.nio.ch.SimpleAsynchronousFileChannelImpl) -> a
    sun.nio.ch.FileDispatcher access$100() -> d
sun.nio.ch.SimpleAsynchronousFileChannelImpl$1 -> xx001.aK:
    long val$position -> a
    long val$size -> b
    boolean val$shared -> c
    sun.nio.ch.FileLockImpl val$fli -> d
    java.nio.channels.CompletionHandler val$handler -> e
    sun.nio.ch.PendingFuture val$result -> f
    java.lang.Object val$attachment -> g
    sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0 -> h
    void run() -> run
sun.nio.ch.SimpleAsynchronousFileChannelImpl$2 -> xx001.aL:
    java.nio.ByteBuffer val$dst -> a
    long val$position -> b
    java.nio.channels.CompletionHandler val$handler -> c
    sun.nio.ch.PendingFuture val$result -> d
    java.lang.Object val$attachment -> e
    sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0 -> f
    void run() -> run
sun.nio.ch.SimpleAsynchronousFileChannelImpl$3 -> xx001.aM:
    java.nio.ByteBuffer val$src -> a
    long val$position -> b
    java.nio.channels.CompletionHandler val$handler -> c
    sun.nio.ch.PendingFuture val$result -> d
    java.lang.Object val$attachment -> e
    sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0 -> f
    void run() -> run
sun.nio.ch.SimpleAsynchronousFileChannelImpl$DefaultExecutorHolder -> xx001.aN:
    java.util.concurrent.ExecutorService defaultExecutor -> a
sun.nio.ch.SinkChannelImpl -> xx001.aO:
    sun.nio.ch.NativeDispatcher nd -> a
    java.io.FileDescriptor fd -> b
    int fdVal -> c
    long thread -> d
    java.lang.Object lock -> e
    java.lang.Object stateLock -> f
    int ST_UNINITIALIZED -> g
    int ST_INUSE -> h
    int ST_KILLED -> i
    int state -> j
    boolean $assertionsDisabled -> k
    java.io.FileDescriptor getFD() -> d
    int getFDVal() -> e
    void implCloseSelectableChannel() -> implCloseSelectableChannel
    void kill() -> c
    void implConfigureBlocking(boolean) -> implConfigureBlocking
    boolean translateReadyOps(int,int,sun.nio.ch.SelectionKeyImpl) -> a
    boolean translateAndUpdateReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> a
    boolean translateAndSetReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> b
    void translateAndSetInterestOps(int,sun.nio.ch.SelectionKeyImpl) -> c
    void ensureOpen() -> a
    int write(java.nio.ByteBuffer) -> write
    long write(java.nio.ByteBuffer[]) -> write
    long write(java.nio.ByteBuffer[],int,int) -> write
sun.nio.ch.SocketAdaptor -> xx001.aP:
    sun.nio.ch.SocketChannelImpl sc -> a
    int timeout -> b
    java.io.InputStream socketInputStream -> c
    boolean $assertionsDisabled -> d
    java.net.Socket create(sun.nio.ch.SocketChannelImpl) -> a
    java.nio.channels.SocketChannel getChannel() -> getChannel
    void connect(java.net.SocketAddress) -> connect
    void connect(java.net.SocketAddress,int) -> connect
    void bind(java.net.SocketAddress) -> bind
    java.net.InetAddress getInetAddress() -> getInetAddress
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getPort() -> getPort
    int getLocalPort() -> getLocalPort
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    void setBooleanOption(java.net.SocketOption,boolean) -> a
    void setIntOption(java.net.SocketOption,int) -> a
    boolean getBooleanOption(java.net.SocketOption) -> a
    int getIntOption(java.net.SocketOption) -> b
    void setTcpNoDelay(boolean) -> setTcpNoDelay
    boolean getTcpNoDelay() -> getTcpNoDelay
    void setSoLinger(boolean,int) -> setSoLinger
    int getSoLinger() -> getSoLinger
    void sendUrgentData(int) -> sendUrgentData
    void setOOBInline(boolean) -> setOOBInline
    boolean getOOBInline() -> getOOBInline
    void setSoTimeout(int) -> setSoTimeout
    int getSoTimeout() -> getSoTimeout
    void setSendBufferSize(int) -> setSendBufferSize
    int getSendBufferSize() -> getSendBufferSize
    void setReceiveBufferSize(int) -> setReceiveBufferSize
    int getReceiveBufferSize() -> getReceiveBufferSize
    void setKeepAlive(boolean) -> setKeepAlive
    boolean getKeepAlive() -> getKeepAlive
    void setTrafficClass(int) -> setTrafficClass
    int getTrafficClass() -> getTrafficClass
    void setReuseAddress(boolean) -> setReuseAddress
    boolean getReuseAddress() -> getReuseAddress
    void close() -> close
    void shutdownInput() -> shutdownInput
    void shutdownOutput() -> shutdownOutput
    java.lang.String toString() -> toString
    boolean isConnected() -> isConnected
    boolean isBound() -> isBound
    boolean isClosed() -> isClosed
    boolean isInputShutdown() -> isInputShutdown
    boolean isOutputShutdown() -> isOutputShutdown
    sun.nio.ch.SocketChannelImpl access$000(sun.nio.ch.SocketAdaptor) -> a
    int access$100(sun.nio.ch.SocketAdaptor) -> b
sun.nio.ch.SocketAdaptor$1 -> xx001.aQ:
    sun.nio.ch.SocketAdaptor this$0 -> a
    java.io.InputStream run() -> a
    java.lang.Object run() -> run
sun.nio.ch.SocketAdaptor$2 -> xx001.aR:
    sun.nio.ch.SocketAdaptor this$0 -> a
    java.io.OutputStream run() -> a
    java.lang.Object run() -> run
sun.nio.ch.SocketAdaptor$SocketInputStream -> xx001.aS:
    sun.nio.ch.SocketAdaptor this$0 -> a
    int read(java.nio.ByteBuffer) -> a
sun.nio.ch.SocketChannelImpl -> xx001.SocketChannelImpl:
    sun.nio.ch.NativeDispatcher nd -> nd
    java.io.FileDescriptor fd -> fd
    int fdVal -> fdVal
    long readerThread -> readerThread
    long writerThread -> writerThread
    java.lang.Object readLock -> readLock
    java.lang.Object writeLock -> writeLock
    java.lang.Object stateLock -> stateLock
    boolean isReuseAddress -> isReuseAddress
    int ST_UNINITIALIZED -> ST_UNINITIALIZED
    int ST_UNCONNECTED -> ST_UNCONNECTED
    int ST_PENDING -> ST_PENDING
    int ST_CONNECTED -> ST_CONNECTED
    int ST_KILLPENDING -> ST_KILLPENDING
    int ST_KILLED -> ST_KILLED
    int state -> state
    java.net.InetSocketAddress localAddress -> localAddress
    java.net.InetSocketAddress remoteAddress -> remoteAddress
    boolean isInputOpen -> isInputOpen
    boolean isOutputOpen -> isOutputOpen
    boolean readyToConnect -> readyToConnect
    java.net.Socket socket -> socket
    boolean $assertionsDisabled -> $assertionsDisabled
    java.net.Socket socket() -> socket
    java.net.SocketAddress getLocalAddress() -> getLocalAddress
    java.net.SocketAddress getRemoteAddress() -> getRemoteAddress
    java.nio.channels.SocketChannel setOption(java.net.SocketOption,java.lang.Object) -> setOption
    java.lang.Object getOption(java.net.SocketOption) -> getOption
    java.util.Set supportedOptions() -> supportedOptions
    boolean ensureReadOpen() -> ensureReadOpen
    void ensureWriteOpen() -> ensureWriteOpen
    void readerCleanup() -> readerCleanup
    void writerCleanup() -> writerCleanup
    int read(java.nio.ByteBuffer) -> read
    long read(java.nio.ByteBuffer[],int,int) -> read
    int write(java.nio.ByteBuffer) -> write
    long write(java.nio.ByteBuffer[],int,int) -> write
    int sendOutOfBandData(byte) -> sendOutOfBandData
    void implConfigureBlocking(boolean) -> implConfigureBlocking
    java.net.InetSocketAddress localAddress() -> localAddress
    java.net.SocketAddress remoteAddress() -> remoteAddress
    java.nio.channels.SocketChannel bind(java.net.SocketAddress) -> bind
    boolean isConnected() -> isConnected
    boolean isConnectionPending() -> isConnectionPending
    void ensureOpenAndUnconnected() -> ensureOpenAndUnconnected
    boolean connect(java.net.SocketAddress) -> connect
    boolean finishConnect() -> finishConnect
    java.nio.channels.SocketChannel shutdownInput() -> shutdownInput
    java.nio.channels.SocketChannel shutdownOutput() -> shutdownOutput
    boolean isInputOpen() -> isInputOpen
    boolean isOutputOpen() -> isOutputOpen
    void implCloseSelectableChannel() -> implCloseSelectableChannel
    void kill() -> kill
    boolean translateReadyOps(int,int,sun.nio.ch.SelectionKeyImpl) -> translateReadyOps
    boolean translateAndUpdateReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> translateAndUpdateReadyOps
    boolean translateAndSetReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> translateAndSetReadyOps
    void translateAndSetInterestOps(int,sun.nio.ch.SelectionKeyImpl) -> translateAndSetInterestOps
    java.io.FileDescriptor getFD() -> getFD
    int getFDVal() -> getFDVal
    java.lang.String toString() -> toString
    int checkConnect(java.io.FileDescriptor,boolean,boolean) -> checkConnect
    int sendOutOfBandData(java.io.FileDescriptor,byte) -> sendOutOfBandData
    java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object) -> setOption
    java.nio.channels.NetworkChannel bind(java.net.SocketAddress) -> bind
sun.nio.ch.SocketChannelImpl$DefaultOptionsHolder -> xx001.aT:
    java.util.Set defaultOptions -> a
    java.util.Set defaultOptions() -> a
sun.nio.ch.SocketDispatcher -> xx001.aU:
    int read(java.io.FileDescriptor,long,int) -> a
    long readv(java.io.FileDescriptor,long,int) -> b
    int write(java.io.FileDescriptor,long,int) -> c
    long writev(java.io.FileDescriptor,long,int) -> d
    void close(java.io.FileDescriptor) -> a
    void preClose(java.io.FileDescriptor) -> b
sun.nio.ch.SocketOptionRegistry -> xx001.aV:
    java.nio.channels.Selector sel -> a
    sun.nio.ch.OptionKey findOption(java.net.SocketOption,java.net.ProtocolFamily) -> a
    java.nio.channels.Selector get() -> a
sun.nio.ch.SocketOptionRegistry$LazyInitialization -> xx001.aW:
    java.util.Map options -> a
    java.util.Map options() -> a
sun.nio.ch.SocketOptionRegistry$RegistryKey -> xx001.aX:
    java.net.SocketOption name -> a
    java.net.ProtocolFamily family -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
sun.nio.ch.SolarisAsynchronousChannelProvider -> xx001.aY:
    sun.nio.ch.SolarisEventPort defaultEventPort -> a
    sun.nio.ch.SolarisEventPort defaultEventPort() -> a
    java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(int,java.util.concurrent.ThreadFactory) -> openAsynchronousChannelGroup
    java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(java.util.concurrent.ExecutorService,int) -> openAsynchronousChannelGroup
    sun.nio.ch.SolarisEventPort toEventPort(java.nio.channels.AsynchronousChannelGroup) -> a
    java.nio.channels.AsynchronousServerSocketChannel openAsynchronousServerSocketChannel(java.nio.channels.AsynchronousChannelGroup) -> openAsynchronousServerSocketChannel
    java.nio.channels.AsynchronousSocketChannel openAsynchronousSocketChannel(java.nio.channels.AsynchronousChannelGroup) -> openAsynchronousSocketChannel
sun.nio.ch.SolarisEventPort -> xx001.SolarisEventPort:
    sun.misc.Unsafe unsafe -> unsafe
    int addressSize -> addressSize
    int SIZEOF_PORT_EVENT -> SIZEOF_PORT_EVENT
    int OFFSETOF_EVENTS -> OFFSETOF_EVENTS
    int OFFSETOF_SOURCE -> OFFSETOF_SOURCE
    int OFFSETOF_OBJECT -> OFFSETOF_OBJECT
    short PORT_SOURCE_USER -> PORT_SOURCE_USER
    short PORT_SOURCE_FD -> PORT_SOURCE_FD
    int port -> port
    boolean closed -> closed
    int dependsArch(int,int) -> dependsArch
    sun.nio.ch.SolarisEventPort start() -> start
    void implClose() -> implClose
    void wakeup() -> wakeup
    void executeOnHandlerTask(java.lang.Runnable) -> executeOnHandlerTask
    void shutdownHandlerTasks() -> shutdownHandlerTasks
    void startPoll(int,int) -> startPoll
    int port_create() -> port_create
    boolean port_associate(int,int,long,int) -> port_associate
    boolean port_dissociate(int,int,long) -> port_dissociate
    void port_get(int,long) -> port_get
    int port_getn(int,long,int,long) -> port_getn
    void port_send(int,int) -> port_send
    void port_close(int) -> port_close
    sun.misc.Unsafe access$100() -> access$100
    int access$200(sun.nio.ch.SolarisEventPort) -> access$200
    void access$300(sun.nio.ch.SolarisEventPort) -> access$300
sun.nio.ch.SolarisEventPort$1 -> xx001.aZ:
sun.nio.ch.SolarisEventPort$EventHandlerTask -> xx001.ba:
    sun.nio.ch.SolarisEventPort this$0 -> a
    void run() -> run
sun.nio.ch.SourceChannelImpl -> xx001.bb:
    sun.nio.ch.NativeDispatcher nd -> a
    java.io.FileDescriptor fd -> b
    int fdVal -> c
    long thread -> d
    java.lang.Object lock -> e
    java.lang.Object stateLock -> f
    int ST_UNINITIALIZED -> g
    int ST_INUSE -> h
    int ST_KILLED -> i
    int state -> j
    boolean $assertionsDisabled -> k
    java.io.FileDescriptor getFD() -> d
    int getFDVal() -> e
    void implCloseSelectableChannel() -> implCloseSelectableChannel
    void kill() -> c
    void implConfigureBlocking(boolean) -> implConfigureBlocking
    boolean translateReadyOps(int,int,sun.nio.ch.SelectionKeyImpl) -> a
    boolean translateAndUpdateReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> a
    boolean translateAndSetReadyOps(int,sun.nio.ch.SelectionKeyImpl) -> b
    void translateAndSetInterestOps(int,sun.nio.ch.SelectionKeyImpl) -> c
    void ensureOpen() -> a
    int read(java.nio.ByteBuffer) -> read
    long read(java.nio.ByteBuffer[],int,int) -> read
    long read(java.nio.ByteBuffer[]) -> read
sun.nio.ch.ThreadPool -> xx001.bc:
    java.lang.String DEFAULT_THREAD_POOL_THREAD_FACTORY -> a
    java.lang.String DEFAULT_THREAD_POOL_INITIAL_SIZE -> b
    java.util.concurrent.ThreadFactory defaultThreadFactory -> c
    java.util.concurrent.ExecutorService executor -> d
    boolean isFixed -> e
    int poolSize -> f
    java.util.concurrent.ExecutorService executor() -> a
    boolean isFixedThreadPool() -> b
    int poolSize() -> c
    java.util.concurrent.ThreadFactory defaultThreadFactory() -> d
    sun.nio.ch.ThreadPool getDefault() -> e
    sun.nio.ch.ThreadPool createDefault() -> f
    sun.nio.ch.ThreadPool create(int,java.util.concurrent.ThreadFactory) -> a
    sun.nio.ch.ThreadPool wrap(java.util.concurrent.ExecutorService,int) -> a
    int getDefaultThreadPoolInitialSize() -> g
    java.util.concurrent.ThreadFactory getDefaultThreadPoolThreadFactory() -> h
sun.nio.ch.ThreadPool$1 -> xx001.bd:
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
sun.nio.ch.ThreadPool$DefaultThreadPoolHolder -> xx001.be:
    sun.nio.ch.ThreadPool defaultThreadPool -> a
sun.nio.ch.UnixAsynchronousServerSocketChannelImpl -> xx001.UnixAsynchronousServerSocketChannelImpl:
    sun.nio.ch.NativeDispatcher nd -> nd
    sun.nio.ch.Port port -> port
    int fdVal -> fdVal
    java.util.concurrent.atomic.AtomicBoolean accepting -> accepting
    java.lang.Object updateLock -> updateLock
    boolean acceptPending -> acceptPending
    java.nio.channels.CompletionHandler acceptHandler -> acceptHandler
    java.lang.Object acceptAttachment -> acceptAttachment
    sun.nio.ch.PendingFuture acceptFuture -> acceptFuture
    java.security.AccessControlContext acceptAcc -> acceptAcc
    void enableAccept() -> enableAccept
    void implClose() -> implClose
    sun.nio.ch.AsynchronousChannelGroupImpl group() -> group
    void onEvent(int,boolean) -> onEvent
    java.nio.channels.AsynchronousSocketChannel finishAccept(java.io.FileDescriptor,java.net.InetSocketAddress,java.security.AccessControlContext) -> finishAccept
    java.util.concurrent.Future implAccept(java.lang.Object,java.nio.channels.CompletionHandler) -> implAccept
    void initIDs() -> initIDs
    int accept0(java.io.FileDescriptor,java.io.FileDescriptor,java.net.InetSocketAddress[]) -> accept0
sun.nio.ch.UnixAsynchronousServerSocketChannelImpl$1 -> xx001.bf:
    java.net.InetSocketAddress val$remote -> a
    sun.nio.ch.UnixAsynchronousServerSocketChannelImpl this$0 -> b
    java.lang.Void run() -> a
    java.lang.Object run() -> run
sun.nio.ch.UnixAsynchronousSocketChannelImpl -> xx001.UnixAsynchronousSocketChannelImpl:
    sun.nio.ch.NativeDispatcher nd -> nd
    boolean disableSynchronousRead -> disableSynchronousRead
    sun.nio.ch.Port port -> port
    int fdVal -> fdVal
    java.lang.Object updateLock -> updateLock
    boolean connectPending -> connectPending
    java.nio.channels.CompletionHandler connectHandler -> connectHandler
    java.lang.Object connectAttachment -> connectAttachment
    sun.nio.ch.PendingFuture connectFuture -> connectFuture
    java.net.SocketAddress pendingRemote -> pendingRemote
    boolean readPending -> readPending
    boolean isScatteringRead -> isScatteringRead
    java.nio.ByteBuffer readBuffer -> readBuffer
    java.nio.ByteBuffer[] readBuffers -> readBuffers
    java.nio.channels.CompletionHandler readHandler -> readHandler
    java.lang.Object readAttachment -> readAttachment
    sun.nio.ch.PendingFuture readFuture -> readFuture
    java.util.concurrent.Future readTimer -> readTimer
    boolean writePending -> writePending
    boolean isGatheringWrite -> isGatheringWrite
    java.nio.ByteBuffer writeBuffer -> writeBuffer
    java.nio.ByteBuffer[] writeBuffers -> writeBuffers
    java.nio.channels.CompletionHandler writeHandler -> writeHandler
    java.lang.Object writeAttachment -> writeAttachment
    sun.nio.ch.PendingFuture writeFuture -> writeFuture
    java.util.concurrent.Future writeTimer -> writeTimer
    java.lang.Runnable readTimeoutTask -> readTimeoutTask
    java.lang.Runnable writeTimeoutTask -> writeTimeoutTask
    boolean $assertionsDisabled -> $assertionsDisabled
    sun.nio.ch.AsynchronousChannelGroupImpl group() -> group
    void updateEvents() -> updateEvents
    void lockAndUpdateEvents() -> lockAndUpdateEvents
    void finish(boolean,boolean,boolean) -> finish
    void onEvent(int,boolean) -> onEvent
    void implClose() -> implClose
    void onCancel(sun.nio.ch.PendingFuture) -> onCancel
    void setConnected() -> setConnected
    void finishConnect(boolean) -> finishConnect
    java.util.concurrent.Future implConnect(java.net.SocketAddress,java.lang.Object,java.nio.channels.CompletionHandler) -> implConnect
    void finishRead(boolean) -> finishRead
    java.util.concurrent.Future implRead(boolean,java.nio.ByteBuffer,java.nio.ByteBuffer[],long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler) -> implRead
    void finishWrite(boolean) -> finishWrite
    java.util.concurrent.Future implWrite(boolean,java.nio.ByteBuffer,java.nio.ByteBuffer[],long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler) -> implWrite
    void checkConnect(int) -> checkConnect
    java.lang.Object access$000(sun.nio.ch.UnixAsynchronousSocketChannelImpl) -> access$000
    boolean access$100(sun.nio.ch.UnixAsynchronousSocketChannelImpl) -> access$100
    boolean access$102(sun.nio.ch.UnixAsynchronousSocketChannelImpl,boolean) -> access$102
    java.nio.channels.CompletionHandler access$200(sun.nio.ch.UnixAsynchronousSocketChannelImpl) -> access$200
    java.lang.Object access$300(sun.nio.ch.UnixAsynchronousSocketChannelImpl) -> access$300
    sun.nio.ch.PendingFuture access$400(sun.nio.ch.UnixAsynchronousSocketChannelImpl) -> access$400
    boolean access$500(sun.nio.ch.UnixAsynchronousSocketChannelImpl) -> access$500
    boolean access$502(sun.nio.ch.UnixAsynchronousSocketChannelImpl,boolean) -> access$502
    java.nio.channels.CompletionHandler access$600(sun.nio.ch.UnixAsynchronousSocketChannelImpl) -> access$600
    java.lang.Object access$700(sun.nio.ch.UnixAsynchronousSocketChannelImpl) -> access$700
    sun.nio.ch.PendingFuture access$800(sun.nio.ch.UnixAsynchronousSocketChannelImpl) -> access$800
sun.nio.ch.UnixAsynchronousSocketChannelImpl$1 -> xx001.bg:
    sun.nio.ch.UnixAsynchronousSocketChannelImpl this$0 -> a
    void run() -> run
sun.nio.ch.UnixAsynchronousSocketChannelImpl$2 -> xx001.bh:
    sun.nio.ch.UnixAsynchronousSocketChannelImpl this$0 -> a
    void run() -> run
sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType -> xx001.bi:
    sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType CONNECT -> a
    sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType READ -> b
    sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType WRITE -> c
    sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType[] $VALUES -> d
    sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType[] values() -> a
    sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType valueOf(java.lang.String) -> a
sun.nio.ch.Util -> xx001.bj:
    int TEMP_BUF_POOL_SIZE -> a
    java.lang.ThreadLocal bufferCache -> b
    java.lang.ThreadLocal localSelector -> c
    java.lang.ThreadLocal localSelectorWrapper -> d
    sun.misc.Unsafe unsafe -> e
    int pageSize -> f
    java.lang.reflect.Constructor directByteBufferConstructor -> g
    java.lang.reflect.Constructor directByteBufferRConstructor -> h
    java.lang.String bugLevel -> i
    boolean loaded -> j
    boolean $assertionsDisabled -> k
    java.nio.ByteBuffer getTemporaryDirectBuffer(int) -> a
    void releaseTemporaryDirectBuffer(java.nio.ByteBuffer) -> a
    void offerFirstTemporaryDirectBuffer(java.nio.ByteBuffer) -> b
    void offerLastTemporaryDirectBuffer(java.nio.ByteBuffer) -> c
    void free(java.nio.ByteBuffer) -> e
    java.nio.channels.Selector getTemporarySelector(java.nio.channels.SelectableChannel) -> a
    void releaseTemporarySelector(java.nio.channels.Selector) -> a
    java.nio.ByteBuffer[] subsequence(java.nio.ByteBuffer[],int,int) -> a
    java.util.Set ungrowableSet(java.util.Set) -> a
    byte _get(long) -> a
    void _put(long,byte) -> a
    void erase(java.nio.ByteBuffer) -> d
    sun.misc.Unsafe unsafe() -> a
    int pageSize() -> d
    void initDBBConstructor() -> e
    java.nio.MappedByteBuffer newMappedByteBuffer(int,long,java.io.FileDescriptor,java.lang.Runnable) -> a
    void initDBBRConstructor() -> f
    java.nio.MappedByteBuffer newMappedByteBufferR(int,long,java.io.FileDescriptor,java.lang.Runnable) -> b
    boolean atBugLevel(java.lang.String) -> a
    void load() -> b
    int access$000() -> c
    java.lang.reflect.Constructor access$302(java.lang.reflect.Constructor) -> a
    java.lang.reflect.Constructor access$402(java.lang.reflect.Constructor) -> b
sun.nio.ch.Util$1 -> xx001.bk:
    sun.nio.ch.Util$BufferCache initialValue() -> a
    java.lang.Object initialValue() -> initialValue
sun.nio.ch.Util$2 -> xx001.bl:
    java.util.Set val$s -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
sun.nio.ch.Util$3 -> xx001.bm:
    java.lang.Void run() -> a
    java.lang.Object run() -> run
sun.nio.ch.Util$4 -> xx001.bn:
    java.lang.Void run() -> a
    java.lang.Object run() -> run
sun.nio.ch.Util$BufferCache -> xx001.bo:
    java.nio.ByteBuffer[] buffers -> a
    int count -> b
    int start -> c
    boolean $assertionsDisabled -> d
    int next(int) -> b
    java.nio.ByteBuffer get(int) -> a
    boolean offerFirst(java.nio.ByteBuffer) -> a
    boolean offerLast(java.nio.ByteBuffer) -> b
    boolean isEmpty() -> a
    java.nio.ByteBuffer removeFirst() -> b
sun.nio.ch.Util$SelectorWrapper -> xx001.bp:
    java.nio.channels.Selector sel -> a
    java.nio.channels.Selector get() -> a
sun.nio.ch.Util$SelectorWrapper$Closer -> xx001.bq:
    java.nio.channels.Selector sel -> a
    void run() -> run
sun.nio.cs.ArrayDecoder -> f.a:
    int decode$3bd869d7() -> a
sun.nio.cs.ArrayEncoder -> f.b:
    int encode$70bea157() -> a
sun.nio.cs.HistoricallyNamedCharset -> f.c:
    java.lang.String historicalName() -> a
sun.nio.cs.StreamDecoder -> f.d:
    int MIN_BYTE_BUFFER_SIZE -> a
    int DEFAULT_BYTE_BUFFER_SIZE -> b
    boolean isOpen -> c
    boolean haveLeftoverChar -> d
    char leftoverChar -> e
    boolean needsFlush -> f
    boolean channelsAvailable -> g
    java.nio.charset.Charset cs -> h
    java.nio.charset.CharsetDecoder decoder -> i
    java.nio.ByteBuffer bb -> j
    java.io.InputStream in -> k
    java.nio.channels.ReadableByteChannel ch -> l
    boolean $assertionsDisabled -> m
    void ensureOpen() -> b
    sun.nio.cs.StreamDecoder forInputStreamReader(java.io.InputStream,java.lang.Object,java.lang.String) -> a
    sun.nio.cs.StreamDecoder forInputStreamReader(java.io.InputStream,java.lang.Object,java.nio.charset.Charset) -> a
    sun.nio.cs.StreamDecoder forInputStreamReader(java.io.InputStream,java.lang.Object,java.nio.charset.CharsetDecoder) -> a
    sun.nio.cs.StreamDecoder forDecoder(java.nio.channels.ReadableByteChannel,java.nio.charset.CharsetDecoder,int) -> a
    java.lang.String getEncoding() -> a
    int read() -> read
    int read0() -> c
    int read(char[],int,int) -> read
    boolean ready() -> ready
    void close() -> close
    boolean isOpen() -> d
    java.nio.channels.FileChannel getChannel(java.io.FileInputStream) -> a
    int readBytes() -> e
    int implRead(char[],int,int) -> a
    java.lang.String encodingName() -> f
    boolean inReady() -> g
    boolean implReady() -> h
    void implClose() -> i
sun.nio.fs.AbstractBasicFileAttributeView -> xx002.a:
    java.lang.String SIZE_NAME -> b
    java.lang.String CREATION_TIME_NAME -> c
    java.lang.String LAST_ACCESS_TIME_NAME -> d
    java.lang.String LAST_MODIFIED_TIME_NAME -> e
    java.lang.String FILE_KEY_NAME -> f
    java.lang.String IS_DIRECTORY_NAME -> g
    java.lang.String IS_REGULAR_FILE_NAME -> h
    java.lang.String IS_SYMBOLIC_LINK_NAME -> i
    java.lang.String IS_OTHER_NAME -> j
    java.util.Set basicAttributeNames -> a
    java.lang.String name() -> name
    void setAttribute(java.lang.String,java.lang.Object) -> a
    void addRequestedBasicAttributes(java.nio.file.attribute.BasicFileAttributes,sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder) -> a
    java.util.Map readAttributes(java.lang.String[]) -> a
sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder -> xx002.b:
    java.util.Set names -> a
    java.util.Map map -> b
    boolean copyAll -> c
    sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder create(java.util.Set,java.lang.String[]) -> a
    boolean match(java.lang.String) -> a
    void add(java.lang.String,java.lang.Object) -> a
    java.util.Map unmodifiableMap() -> a
    java.nio.file.spi.FileSystemProvider createProvider(java.lang.String) -> b
    java.nio.file.spi.FileSystemProvider create() -> b
sun.nio.fs.AbstractFileSystemProvider -> xx002.c:
    java.lang.String[] split(java.lang.String) -> a
    sun.nio.fs.DynamicFileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[]) -> a
    void setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption[]) -> setAttribute
    java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[]) -> readAttributes
    boolean implDelete(java.nio.file.Path,boolean) -> a
    void delete(java.nio.file.Path) -> delete
    boolean deleteIfExists(java.nio.file.Path) -> deleteIfExists
sun.nio.fs.AbstractFileTypeDetector -> xx002.d:
    java.lang.String TSPECIALS -> a
    java.lang.String probeContentType(java.nio.file.Path) -> probeContentType
    java.lang.String implProbeContentType$14cdf174() -> a
    java.lang.String parse(java.lang.String) -> a
    boolean isTokenChar(char) -> a
    boolean isValidToken(java.lang.String) -> b
sun.nio.fs.AbstractPath -> xx002.e:
    boolean startsWith(java.lang.String) -> startsWith
    boolean endsWith(java.lang.String) -> endsWith
    java.nio.file.Path resolve(java.lang.String) -> resolve
    java.nio.file.Path resolveSibling(java.nio.file.Path) -> resolveSibling
    java.nio.file.Path resolveSibling(java.lang.String) -> resolveSibling
    java.util.Iterator iterator() -> iterator
    java.io.File toFile() -> toFile
    java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[]) -> register
sun.nio.fs.AbstractPath$1 -> xx002.f:
    int i -> a
    sun.nio.fs.AbstractPath this$0 -> b
    boolean hasNext() -> hasNext
    java.nio.file.Path next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
sun.nio.fs.AbstractWatchKey -> xx002.g:
    int MAX_EVENT_LIST_SIZE -> a
    sun.nio.fs.AbstractWatchKey$Event OVERFLOW_EVENT -> b
    sun.nio.fs.AbstractWatchService watcher -> c
    java.nio.file.Path dir -> d
    sun.nio.fs.AbstractWatchKey$State state -> e
    java.util.List events -> f
    java.util.Map lastModifyEvents -> g
    boolean $assertionsDisabled -> h
    sun.nio.fs.AbstractWatchService watcher() -> a
    java.nio.file.Path watchable() -> b
    void signal() -> c
    void signalEvent(java.nio.file.WatchEvent$Kind,java.lang.Object) -> a
    java.util.List pollEvents() -> pollEvents
    boolean reset() -> reset
    java.nio.file.Watchable watchable() -> watchable
sun.nio.fs.AbstractWatchKey$Event -> xx002.h:
    java.nio.file.WatchEvent$Kind kind -> a
    java.lang.Object context -> b
    int count -> c
    java.nio.file.WatchEvent$Kind kind() -> kind
    java.lang.Object context() -> context
    int count() -> count
    void increment() -> a
sun.nio.fs.AbstractWatchKey$State -> xx002.i:
    sun.nio.fs.AbstractWatchKey$State READY -> a
    sun.nio.fs.AbstractWatchKey$State SIGNALLED -> b
    sun.nio.fs.AbstractWatchKey$State[] $VALUES -> c
    sun.nio.fs.AbstractWatchKey$State[] values() -> a
    sun.nio.fs.AbstractWatchKey$State valueOf(java.lang.String) -> a
sun.nio.fs.AbstractWatchService -> xx002.j:
    java.util.concurrent.LinkedBlockingDeque pendingKeys -> a
    java.nio.file.WatchKey CLOSE_KEY -> b
    boolean closed -> c
    java.lang.Object closeLock -> d
    java.nio.file.WatchKey register$ad7d985() -> a
    void enqueueKey(java.nio.file.WatchKey) -> a
    void checkOpen() -> c
    void checkKey(java.nio.file.WatchKey) -> b
    java.nio.file.WatchKey poll() -> poll
    java.nio.file.WatchKey poll(long,java.util.concurrent.TimeUnit) -> poll
    java.nio.file.WatchKey take() -> take
    boolean isOpen() -> d
    java.lang.Object closeLock() -> e
    void implClose() -> b
    void close() -> close
sun.nio.fs.AbstractWatchService$1 -> xx002.k:
    sun.nio.fs.AbstractWatchService this$0 -> a
    boolean isValid() -> isValid
    void cancel() -> cancel
sun.nio.fs.BasicFileAttributesHolder -> xx002.l:
    java.nio.file.attribute.BasicFileAttributes get() -> a
    void invalidate() -> b
sun.nio.fs.Cancellable -> xx002.m:
    sun.misc.Unsafe unsafe -> a
    long pollingAddress -> b
    java.lang.Object lock -> c
    boolean completed -> d
    java.lang.Throwable exception -> e
    long addressToPollForCancel() -> a
    int cancelValue() -> c
    void cancel() -> d
    java.lang.Throwable exception() -> e
    void run() -> run
    void implRun() -> b
    void runInterruptibly(sun.nio.fs.Cancellable) -> a
sun.nio.fs.DefaultFileSystemProvider -> xx002.n:
    java.nio.file.spi.FileSystemProvider createProvider(java.lang.String) -> a
    java.nio.file.spi.FileSystemProvider create() -> a
sun.nio.fs.DefaultFileSystemProvider$1 -> xx002.o:
    java.lang.String val$cn -> a
    java.nio.file.spi.FileSystemProvider run() -> a
    java.lang.Object run() -> run
sun.nio.fs.DefaultFileTypeDetector -> xx002.p:
    java.nio.file.spi.FileTypeDetector create() -> a
sun.nio.fs.DynamicFileAttributeView -> xx002.q:
    void setAttribute(java.lang.String,java.lang.Object) -> a
    java.util.Map readAttributes(java.lang.String[]) -> a
sun.nio.fs.FileOwnerAttributeViewImpl -> xx002.r:
    java.lang.String OWNER_NAME -> a
    java.nio.file.attribute.FileAttributeView view -> b
    boolean isPosixView -> c
    java.lang.String name() -> name
    void setAttribute(java.lang.String,java.lang.Object) -> a
    java.util.Map readAttributes(java.lang.String[]) -> a
    java.nio.file.attribute.UserPrincipal getOwner() -> getOwner
    void setOwner(java.nio.file.attribute.UserPrincipal) -> setOwner
sun.nio.fs.Globs -> xx002.s:
    java.lang.String regexMetaChars -> a
    java.lang.String globMetaChars -> b
    char EOL -> c
    boolean isRegexMeta(char) -> a
    boolean isGlobMeta(char) -> b
    char next(java.lang.String,int) -> a
    java.lang.String toRegexPattern(java.lang.String,boolean) -> a
    java.lang.String toUnixRegexPattern(java.lang.String) -> a
    java.lang.String toWindowsRegexPattern(java.lang.String) -> b
sun.nio.fs.NativeBuffer -> xx002.t:
    sun.misc.Unsafe unsafe -> a
    long address -> b
    int size -> c
    sun.misc.Cleaner cleaner -> d
    java.lang.Object owner -> e
    void release() -> a
    long address() -> b
    int size() -> c
    sun.misc.Cleaner cleaner() -> d
    void setOwner(java.lang.Object) -> a
    java.lang.Object owner() -> e
    sun.misc.Unsafe access$000() -> f
sun.nio.fs.NativeBuffer$Deallocator -> xx002.u:
    long address -> a
    void run() -> run
sun.nio.fs.NativeBuffers -> xx002.v:
    sun.misc.Unsafe unsafe -> a
    int TEMP_BUF_POOL_SIZE -> b
    java.lang.ThreadLocal threadLocal -> c
    boolean $assertionsDisabled -> d
    sun.nio.fs.NativeBuffer allocNativeBuffer(int) -> a
    sun.nio.fs.NativeBuffer getNativeBufferFromCache(int) -> b
    sun.nio.fs.NativeBuffer getNativeBuffer(int) -> c
    void releaseNativeBuffer(sun.nio.fs.NativeBuffer) -> a
    void copyCStringToNativeBuffer(byte[],sun.nio.fs.NativeBuffer) -> a
    sun.nio.fs.NativeBuffer asNativeBuffer(byte[]) -> a
sun.nio.fs.UnixChannelFactory -> xx002.w:
    java.nio.channels.FileChannel newFileChannel(int,java.lang.String,boolean,boolean) -> a
    java.nio.channels.FileChannel newFileChannel(int,sun.nio.fs.UnixPath,java.lang.String,java.util.Set,int) -> a
    java.nio.channels.FileChannel newFileChannel(sun.nio.fs.UnixPath,java.util.Set,int) -> a
    java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(sun.nio.fs.UnixPath,java.util.Set,int,sun.nio.ch.ThreadPool) -> a
    java.io.FileDescriptor open(int,sun.nio.fs.UnixPath,java.lang.String,sun.nio.fs.UnixChannelFactory$Flags,int) -> a
sun.nio.fs.UnixChannelFactory$1 -> xx002.x:
    int[] $SwitchMap$java$nio$file$StandardOpenOption -> a
sun.nio.fs.UnixChannelFactory$Flags -> xx002.y:
    boolean read -> a
    boolean write -> b
    boolean append -> c
    boolean truncateExisting -> d
    boolean noFollowLinks -> e
    boolean create -> f
    boolean createNew -> g
    boolean deleteOnClose -> h
    boolean sync -> i
    boolean dsync -> j
    sun.nio.fs.UnixChannelFactory$Flags toFlags(java.util.Set) -> a
sun.nio.fs.UnixConstants -> xx002.z:
    int O_RDONLY -> a
    int O_WRONLY -> b
    int O_RDWR -> c
    int O_APPEND -> d
    int O_CREAT -> e
    int O_EXCL -> f
    int O_TRUNC -> g
    int O_SYNC -> h
    int O_DSYNC -> i
    int O_NOFOLLOW -> j
    int S_IAMB -> k
    int S_IRUSR -> l
    int S_IWUSR -> m
    int S_IXUSR -> n
    int S_IRGRP -> o
    int S_IWGRP -> p
    int S_IXGRP -> q
    int S_IROTH -> r
    int S_IWOTH -> s
    int S_IXOTH -> t
    int S_IFMT -> u
    int S_IFREG -> v
    int S_IFDIR -> w
    int S_IFLNK -> x
    int S_IFCHR -> y
    int S_IFBLK -> z
    int S_IFIFO -> A
    int R_OK -> B
    int W_OK -> C
    int X_OK -> D
    int F_OK -> E
    int ENOENT -> F
    int EACCES -> G
    int EEXIST -> H
    int ENOTDIR -> I
    int EINVAL -> J
    int EXDEV -> K
    int EISDIR -> L
    int ENOTEMPTY -> M
    int ENOSPC -> N
    int EAGAIN -> O
    int ENOSYS -> P
    int ELOOP -> Q
    int EROFS -> R
    int ENODATA -> S
    int ERANGE -> T
    int AT_SYMLINK_NOFOLLOW -> U
    int AT_REMOVEDIR -> V
sun.nio.fs.UnixCopyFile -> xx002.UnixCopyFile:
    void copyDirectory(sun.nio.fs.UnixPath,sun.nio.fs.UnixFileAttributes,sun.nio.fs.UnixPath,sun.nio.fs.UnixCopyFile$Flags) -> copyDirectory
    void copyFile(sun.nio.fs.UnixPath,sun.nio.fs.UnixFileAttributes,sun.nio.fs.UnixPath,sun.nio.fs.UnixCopyFile$Flags,long) -> copyFile
    void copyLink(sun.nio.fs.UnixPath,sun.nio.fs.UnixFileAttributes,sun.nio.fs.UnixPath,sun.nio.fs.UnixCopyFile$Flags) -> copyLink
    void copySpecial$c599998(sun.nio.fs.UnixFileAttributes,sun.nio.fs.UnixPath,sun.nio.fs.UnixCopyFile$Flags) -> copySpecial$c599998
    void move(sun.nio.fs.UnixPath,sun.nio.fs.UnixPath,java.nio.file.CopyOption[]) -> move
    void copy(sun.nio.fs.UnixPath,sun.nio.fs.UnixPath,java.nio.file.CopyOption[]) -> copy
    void transfer(int,int,long) -> transfer
    void access$000(sun.nio.fs.UnixPath,sun.nio.fs.UnixFileAttributes,sun.nio.fs.UnixPath,sun.nio.fs.UnixCopyFile$Flags,long) -> access$000
sun.nio.fs.UnixCopyFile$1 -> xx002.A:
    sun.nio.fs.UnixPath val$source -> a
    sun.nio.fs.UnixFileAttributes val$attrsToCopy -> b
    sun.nio.fs.UnixPath val$target -> c
    sun.nio.fs.UnixCopyFile$Flags val$flags -> d
    void implRun() -> b
sun.nio.fs.UnixCopyFile$2 -> xx002.B:
    java.lang.Void run() -> a
    java.lang.Object run() -> run
sun.nio.fs.UnixCopyFile$Flags -> xx002.C:
    boolean replaceExisting -> a
    boolean atomicMove -> b
    boolean followLinks -> c
    boolean interruptible -> d
    boolean copyBasicAttributes -> e
    boolean copyPosixAttributes -> f
    boolean copyNonPosixAttributes -> g
    boolean failIfUnableToCopyBasic -> h
    boolean failIfUnableToCopyPosix -> i
    boolean failIfUnableToCopyNonPosix -> j
    sun.nio.fs.UnixCopyFile$Flags fromCopyOptions(java.nio.file.CopyOption[]) -> a
    sun.nio.fs.UnixCopyFile$Flags fromMoveOptions(java.nio.file.CopyOption[]) -> b
sun.nio.fs.UnixDirectoryStream -> xx002.D:
    sun.nio.fs.UnixPath dir -> a
    long dp -> b
    java.nio.file.DirectoryStream$Filter filter -> c
    java.util.concurrent.locks.ReentrantReadWriteLock streamLock -> d
    boolean isClosed -> e
    java.util.Iterator iterator -> f
    sun.nio.fs.UnixPath directory() -> a
    java.util.concurrent.locks.Lock readLock() -> b
    java.util.concurrent.locks.Lock writeLock() -> c
    boolean isOpen() -> d
    boolean closeImpl() -> e
    void close() -> close
    java.util.Iterator iterator(java.nio.file.DirectoryStream) -> a
    java.util.Iterator iterator() -> iterator
    long access$000(sun.nio.fs.UnixDirectoryStream) -> a
    sun.nio.fs.UnixPath access$100(sun.nio.fs.UnixDirectoryStream) -> b
    java.nio.file.DirectoryStream$Filter access$200(sun.nio.fs.UnixDirectoryStream) -> c
sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator -> xx002.E:
    java.nio.file.DirectoryStream stream -> a
    boolean atEof -> b
    java.nio.file.Path nextEntry -> c
    boolean $assertionsDisabled -> d
    sun.nio.fs.UnixDirectoryStream this$0 -> e
    boolean isSelfOrParent(byte[]) -> a
    java.nio.file.Path readNextEntry() -> a
    boolean hasNext() -> hasNext
    java.nio.file.Path next() -> b
    void remove() -> remove
    java.lang.Object next() -> next
sun.nio.fs.UnixException -> xx002.F:
    long serialVersionUID -> a
    int errno -> b
    java.lang.String msg -> c
    int errno() -> a
    void setError(int) -> a
    java.lang.String errorString() -> b
    java.lang.String getMessage() -> getMessage
    java.io.IOException translateToIOException(java.lang.String,java.lang.String) -> a
    void rethrowAsIOException(java.lang.String) -> a
    void rethrowAsIOException(sun.nio.fs.UnixPath,sun.nio.fs.UnixPath) -> a
    void rethrowAsIOException(sun.nio.fs.UnixPath) -> a
    java.io.IOException asIOException(sun.nio.fs.UnixPath) -> b
sun.nio.fs.UnixFileAttributeViews -> xx002.G:
    sun.nio.fs.UnixFileAttributeViews$Basic createBasicView(sun.nio.fs.UnixPath,boolean) -> a
    sun.nio.fs.UnixFileAttributeViews$Posix createPosixView(sun.nio.fs.UnixPath,boolean) -> b
    sun.nio.fs.UnixFileAttributeViews$Unix createUnixView(sun.nio.fs.UnixPath,boolean) -> c
    sun.nio.fs.FileOwnerAttributeViewImpl createOwnerView(sun.nio.fs.UnixPath,boolean) -> d
sun.nio.fs.UnixFileAttributeViews$Basic -> xx002.H:
    sun.nio.fs.UnixPath file -> b
    boolean followLinks -> c
    java.nio.file.attribute.BasicFileAttributes readAttributes() -> readAttributes
    void setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime) -> setTimes
sun.nio.fs.UnixFileAttributeViews$Posix -> xx002.I:
    java.lang.String PERMISSIONS_NAME -> e
    java.lang.String OWNER_NAME -> f
    java.lang.String GROUP_NAME -> g
    java.util.Set posixAttributeNames -> d
    void checkReadExtended() -> b
    void checkWriteExtended() -> c
    java.lang.String name() -> name
    void setAttribute(java.lang.String,java.lang.Object) -> a
    void addRequestedPosixAttributes(java.nio.file.attribute.PosixFileAttributes,sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder) -> a
    java.util.Map readAttributes(java.lang.String[]) -> a
    sun.nio.fs.UnixFileAttributes readAttributes() -> a
    void setMode(int) -> a
    void setOwners(int,int) -> a
    void setPermissions(java.util.Set) -> setPermissions
    void setOwner(java.nio.file.attribute.UserPrincipal) -> setOwner
    java.nio.file.attribute.UserPrincipal getOwner() -> getOwner
    void setGroup(java.nio.file.attribute.GroupPrincipal) -> setGroup
    java.nio.file.attribute.BasicFileAttributes readAttributes() -> readAttributes
    java.nio.file.attribute.PosixFileAttributes readAttributes() -> readAttributes
sun.nio.fs.UnixFileAttributeViews$Unix -> xx002.J:
    java.lang.String MODE_NAME -> e
    java.lang.String INO_NAME -> f
    java.lang.String DEV_NAME -> g
    java.lang.String RDEV_NAME -> h
    java.lang.String NLINK_NAME -> i
    java.lang.String UID_NAME -> j
    java.lang.String GID_NAME -> k
    java.lang.String CTIME_NAME -> l
    java.util.Set unixAttributeNames -> m
    java.lang.String name() -> name
    void setAttribute(java.lang.String,java.lang.Object) -> a
    java.util.Map readAttributes(java.lang.String[]) -> a
sun.nio.fs.UnixFileAttributes -> xx002.K:
    int st_mode -> a
    long st_ino -> b
    long st_dev -> c
    long st_rdev -> d
    int st_nlink -> e
    int st_uid -> f
    int st_gid -> g
    long st_size -> h
    long st_atime -> i
    long st_mtime -> j
    long st_ctime -> k
    java.nio.file.attribute.UserPrincipal owner -> l
    java.nio.file.attribute.GroupPrincipal group -> m
    sun.nio.fs.UnixFileKey key -> n
    sun.nio.fs.UnixFileAttributes get(sun.nio.fs.UnixPath,boolean) -> a
    sun.nio.fs.UnixFileAttributes get(int) -> a
    sun.nio.fs.UnixFileAttributes get(int,sun.nio.fs.UnixPath,boolean) -> a
    boolean isSameFile(sun.nio.fs.UnixFileAttributes) -> a
    int mode() -> a
    long ino() -> b
    long dev() -> c
    long rdev() -> d
    int nlink() -> e
    int uid() -> f
    int gid() -> g
    java.nio.file.attribute.FileTime ctime() -> h
    boolean isDevice() -> i
    java.nio.file.attribute.FileTime lastModifiedTime() -> lastModifiedTime
    java.nio.file.attribute.FileTime lastAccessTime() -> lastAccessTime
    java.nio.file.attribute.FileTime creationTime() -> creationTime
    boolean isRegularFile() -> isRegularFile
    boolean isDirectory() -> isDirectory
    boolean isSymbolicLink() -> isSymbolicLink
    boolean isOther() -> isOther
    long size() -> size
    sun.nio.fs.UnixFileKey fileKey() -> j
    java.nio.file.attribute.UserPrincipal owner() -> owner
    java.nio.file.attribute.GroupPrincipal group() -> group
    java.util.Set permissions() -> permissions
    java.nio.file.attribute.BasicFileAttributes asBasicFileAttributes() -> k
    sun.nio.fs.UnixFileAttributes toUnixFileAttributes(java.nio.file.attribute.BasicFileAttributes) -> a
    java.lang.Object fileKey() -> fileKey
sun.nio.fs.UnixFileAttributes$UnixAsBasicFileAttributes -> xx002.L:
    sun.nio.fs.UnixFileAttributes attrs -> a
    sun.nio.fs.UnixFileAttributes$UnixAsBasicFileAttributes wrap(sun.nio.fs.UnixFileAttributes) -> a
    sun.nio.fs.UnixFileAttributes unwrap() -> a
    java.nio.file.attribute.FileTime lastModifiedTime() -> lastModifiedTime
    java.nio.file.attribute.FileTime lastAccessTime() -> lastAccessTime
    java.nio.file.attribute.FileTime creationTime() -> creationTime
    boolean isRegularFile() -> isRegularFile
    boolean isDirectory() -> isDirectory
    boolean isSymbolicLink() -> isSymbolicLink
    boolean isOther() -> isOther
    long size() -> size
    java.lang.Object fileKey() -> fileKey
sun.nio.fs.UnixFileKey -> xx002.M:
    long st_dev -> a
    long st_ino -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
sun.nio.fs.UnixFileModeAttribute -> xx002.N:
    int ALL_PERMISSIONS -> a
    int ALL_READWRITE -> b
    int TEMPFILE_PERMISSIONS -> c
    int toUnixMode(java.util.Set) -> a
    int toUnixMode(int,java.nio.file.attribute.FileAttribute[]) -> a
sun.nio.fs.UnixFileModeAttribute$1 -> xx002.O:
    int[] $SwitchMap$java$nio$file$attribute$PosixFilePermission -> a
sun.nio.fs.UnixFileStoreAttributes -> xx002.P:
    long f_frsize -> a
    long f_blocks -> b
    long f_bfree -> c
    long f_bavail -> d
    sun.nio.fs.UnixFileStoreAttributes get(sun.nio.fs.UnixPath) -> a
    long blockSize() -> a
    long totalBlocks() -> b
    long freeBlocks() -> c
    long availableBlocks() -> d
sun.nio.fs.UnixFileSystem -> xx002.Q:
    sun.nio.fs.UnixFileSystemProvider provider -> a
    byte[] defaultDirectory -> b
    boolean needToResolveAgainstDefaultDirectory -> c
    sun.nio.fs.UnixPath rootDirectory -> d
    java.lang.String GLOB_SYNTAX -> e
    java.lang.String REGEX_SYNTAX -> f
    byte[] defaultDirectory() -> a
    boolean needToResolveAgainstDefaultDirectory() -> b
    sun.nio.fs.UnixPath rootDirectory() -> c
    boolean isSolaris() -> d
    java.util.List standardFileAttributeViews() -> h
    java.nio.file.spi.FileSystemProvider provider() -> provider
    java.lang.String getSeparator() -> getSeparator
    boolean isOpen() -> isOpen
    boolean isReadOnly() -> isReadOnly
    void close() -> close
    void copyNonPosixAttributes$255f295() -> e
    java.lang.Iterable getRootDirectories() -> getRootDirectories
    java.lang.Iterable getMountEntries() -> f
    java.nio.file.FileStore getFileStore$499f079e() -> g
    java.lang.Iterable getFileStores() -> getFileStores
    java.nio.file.Path getPath(java.lang.String,java.lang.String[]) -> getPath
    java.nio.file.PathMatcher getPathMatcher(java.lang.String) -> getPathMatcher
    java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService() -> getUserPrincipalLookupService
    java.util.regex.Pattern compilePathMatchPattern(java.lang.String) -> b
    char[] normalizeNativePath(char[]) -> a
    java.lang.String normalizeJavaPath(java.lang.String) -> a
    sun.nio.fs.UnixPath access$000(sun.nio.fs.UnixFileSystem) -> a
sun.nio.fs.UnixFileSystem$1 -> xx002.R:
    java.util.List val$allowedList -> a
    sun.nio.fs.UnixFileSystem this$0 -> b
    java.util.Iterator iterator() -> iterator
sun.nio.fs.UnixFileSystem$2 -> xx002.S:
    sun.nio.fs.UnixFileSystem this$0 -> a
    java.util.Iterator iterator() -> iterator
sun.nio.fs.UnixFileSystem$3 -> xx002.T:
    java.util.regex.Pattern val$pattern -> a
    sun.nio.fs.UnixFileSystem this$0 -> b
    boolean matches(java.nio.file.Path) -> matches
sun.nio.fs.UnixFileSystem$FileStoreIterator -> xx002.U:
    java.util.Iterator entries -> a
    java.nio.file.FileStore next -> b
    boolean $assertionsDisabled -> c
    sun.nio.fs.UnixFileSystem this$0 -> d
    java.nio.file.FileStore readNext() -> a
    boolean hasNext() -> hasNext
    java.nio.file.FileStore next() -> b
    void remove() -> remove
    java.lang.Object next() -> next
sun.nio.fs.UnixFileSystem$LookupService -> xx002.V:
    java.nio.file.attribute.UserPrincipalLookupService instance -> a
sun.nio.fs.UnixFileSystem$LookupService$1 -> xx002.W:
    java.nio.file.attribute.UserPrincipal lookupPrincipalByName(java.lang.String) -> lookupPrincipalByName
    java.nio.file.attribute.GroupPrincipal lookupPrincipalByGroupName(java.lang.String) -> lookupPrincipalByGroupName
sun.nio.fs.UnixFileSystemProvider -> xx002.X:
    java.lang.String USER_DIR -> a
    sun.nio.fs.UnixFileSystem theFileSystem -> b
    sun.nio.fs.UnixFileSystem newFileSystem$1838cc87() -> a
    java.lang.String getScheme() -> getScheme
    void checkUri(java.net.URI) -> a
    java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map) -> newFileSystem
    java.nio.file.FileSystem getFileSystem(java.net.URI) -> getFileSystem
    java.nio.file.Path getPath(java.net.URI) -> getPath
    sun.nio.fs.UnixPath checkPath(java.nio.file.Path) -> a
    java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[]) -> getFileAttributeView
    java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[]) -> readAttributes
    sun.nio.fs.DynamicFileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[]) -> a
    java.nio.channels.FileChannel newFileChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[]) -> newFileChannel
    java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[]) -> newAsynchronousFileChannel
    java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[]) -> newByteChannel
    boolean implDelete(java.nio.file.Path,boolean) -> a
    void copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[]) -> copy
    void move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[]) -> move
    void checkAccess(java.nio.file.Path,java.nio.file.AccessMode[]) -> checkAccess
    boolean isSameFile(java.nio.file.Path,java.nio.file.Path) -> isSameFile
    boolean isHidden(java.nio.file.Path) -> isHidden
    java.nio.file.FileStore getFileStore$5b09f62e() -> b
    java.nio.file.FileStore getFileStore(java.nio.file.Path) -> getFileStore
    void createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[]) -> createDirectory
    java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter) -> newDirectoryStream
    void createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute[]) -> createSymbolicLink
    void createLink(java.nio.file.Path,java.nio.file.Path) -> createLink
    java.nio.file.Path readSymbolicLink(java.nio.file.Path) -> readSymbolicLink
    java.nio.file.spi.FileTypeDetector getFileTypeDetector() -> c
sun.nio.fs.UnixFileSystemProvider$1 -> xx002.Y:
    sun.nio.fs.UnixFileSystemProvider this$0 -> a
    java.lang.String implProbeContentType$14cdf174() -> a
sun.nio.fs.UnixFileSystemProvider$2 -> xx002.Z:
    int[] $SwitchMap$java$nio$file$AccessMode -> a
sun.nio.fs.UnixMountEntry -> xx002.aa:
    byte[] name -> a
    byte[] dir -> b
    byte[] fstype -> c
    byte[] opts -> d
    long dev -> e
    java.lang.Stri